(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vestjs-runtime'), require('vest-utils')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vestjs-runtime', 'vest-utils'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.SuiteSerializer = {}, global["vestjs-runtime"], global["vest-utils"]));
})(this, (function (exports, vestjsRuntime, vestUtils) { 'use strict';

  var IsolateKeys;
  (function (IsolateKeys) {
      IsolateKeys["Type"] = "$type";
      IsolateKeys["Keys"] = "keys";
      IsolateKeys["Key"] = "key";
      IsolateKeys["Parent"] = "parent";
      IsolateKeys["Data"] = "data";
      IsolateKeys["AllowReorder"] = "allowReorder";
      IsolateKeys["Status"] = "status";
      IsolateKeys["AbortController"] = "abortController";
      IsolateKeys["Children"] = "children";
  })(IsolateKeys || (IsolateKeys = {}));
  new Set([
      IsolateKeys.AbortController,
      IsolateKeys.Parent,
      IsolateKeys.Keys,
  ]);

  const CommonStates = {
      PENDING: 'PENDING',
      INITIAL: 'INITIAL',
      DONE: 'DONE',
  };
  const State = {
      [CommonStates.PENDING]: CommonStates.PENDING,
      [CommonStates.INITIAL]: CommonStates.INITIAL,
      [CommonStates.DONE]: CommonStates.DONE,
  };
  const machine$1 = {
      initial: State.INITIAL,
      states: {
          [State.DONE]: {},
          [State.INITIAL]: {
              [State.PENDING]: State.PENDING,
              [State.DONE]: State.DONE,
          },
          [State.PENDING]: {
              [State.DONE]: State.DONE,
          },
      },
  };
  vestUtils.StateMachine(machine$1);

  const TestStatus = {
      [CommonStates.PENDING]: CommonStates.PENDING,
      CANCELED: 'CANCELED',
      FAILED: 'FAILED',
      OMITTED: 'OMITTED',
      PASSING: 'PASSING',
      SKIPPED: 'SKIPPED',
      UNTESTED: 'UNTESTED',
      WARNING: 'WARNING',
  };
  const TestAction = {
      RESET: 'RESET',
  };
  const machine = {
      initial: TestStatus.UNTESTED,
      states: {
          '*': {
              [TestStatus.OMITTED]: TestStatus.OMITTED,
              [TestAction.RESET]: TestStatus.UNTESTED,
          },
          [TestStatus.UNTESTED]: {
              [TestStatus.CANCELED]: TestStatus.CANCELED,
              [TestStatus.FAILED]: TestStatus.FAILED,
              [TestStatus.PASSING]: TestStatus.PASSING,
              [TestStatus.PENDING]: TestStatus.PENDING,
              [TestStatus.SKIPPED]: TestStatus.SKIPPED,
              [TestStatus.WARNING]: TestStatus.WARNING,
          },
          [TestStatus.PENDING]: {
              [TestStatus.CANCELED]: TestStatus.CANCELED,
              [TestStatus.FAILED]: TestStatus.FAILED,
              [TestStatus.PASSING]: TestStatus.PASSING,
              [TestStatus.SKIPPED]: [
                  TestStatus.SKIPPED,
                  (force) => force === true,
              ],
              [TestStatus.WARNING]: TestStatus.WARNING,
          },
          [TestStatus.SKIPPED]: {},
          [TestStatus.FAILED]: {},
          [TestStatus.WARNING]: {},
          [TestStatus.PASSING]: {},
          [TestStatus.CANCELED]: {},
          [TestStatus.OMITTED]: {},
      },
  };
  vestUtils.StateMachine(machine);

  class SuiteSerializer {
      static serialize(suite) {
          const dump = Object.assign({}, suite.dump());
          return vestjsRuntime.IsolateSerializer.serialize(dump, suiteSerializerReplacer);
      }
      static deserialize(serialized) {
          return vestjsRuntime.IsolateSerializer.deserialize(serialized);
      }
      static resume(suite, root) {
          const suiteRoot = SuiteSerializer.deserialize(root);
          suite.resume(suiteRoot);
      }
  }
  function suiteSerializerReplacer(value, key) {
      if (key === 'output') {
          return undefined;
      }
      if (key === IsolateKeys.Status) {
          if (AllowedStatuses.has(value)) {
              return value;
          }
          return undefined;
      }
      if (DisallowedKeys.has(key)) {
          return undefined;
      }
      return value;
  }
  const AllowedStatuses = new Set([
      TestStatus.FAILED,
      TestStatus.PASSING,
      TestStatus.WARNING,
  ]);
  const DisallowedKeys = new Set(['focusMode', 'match', 'matchAll', 'severity']);

  exports.SuiteSerializer = SuiteSerializer;

}));
//# sourceMappingURL=SuiteSerializer.development.js.map
