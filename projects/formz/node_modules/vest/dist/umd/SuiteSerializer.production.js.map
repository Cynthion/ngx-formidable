{"version":3,"file":"SuiteSerializer.production.js","sources":["../../../vestjs-runtime/src/Isolate/IsolateKeys.ts","../../src/core/StateMachines/CommonStateMachine.ts","../../src/core/StateMachines/IsolateTestStateMachine.ts","../../src/exports/SuiteSerializer.ts"],"sourcesContent":["export enum IsolateKeys {\n  Type = '$type',\n  Keys = 'keys',\n  Key = 'key',\n  Parent = 'parent',\n  Data = 'data',\n  AllowReorder = 'allowReorder',\n  Status = 'status',\n  AbortController = 'abortController',\n  Children = 'children',\n}\n\nexport const ExcludedFromDump = new Set([\n  IsolateKeys.AbortController,\n  IsolateKeys.Parent,\n  IsolateKeys.Keys,\n]);\n","import { StateMachine, TStateMachine, ValueOf } from 'vest-utils';\n\nexport const CommonStates = {\n  PENDING: 'PENDING',\n  INITIAL: 'INITIAL',\n  DONE: 'DONE',\n};\n\nconst State = {\n  [CommonStates.PENDING]: CommonStates.PENDING,\n  [CommonStates.INITIAL]: CommonStates.INITIAL,\n  [CommonStates.DONE]: CommonStates.DONE,\n};\n\nexport type State = ValueOf<typeof State>;\n\nconst machine: TStateMachine<State> = {\n  initial: State.INITIAL,\n  states: {\n    [State.DONE]: {},\n    [State.INITIAL]: {\n      [State.PENDING]: State.PENDING,\n      [State.DONE]: State.DONE,\n    },\n    [State.PENDING]: {\n      [State.DONE]: State.DONE,\n    },\n  },\n};\n\nexport const CommonStateMachine = StateMachine<State>(machine);\n","import { StateMachine, TStateMachine, ValueOf } from 'vest-utils';\n\nimport { CommonStates } from 'CommonStateMachine';\n\nexport const TestStatus = {\n  [CommonStates.PENDING]: CommonStates.PENDING,\n  CANCELED: 'CANCELED',\n  FAILED: 'FAILED',\n  OMITTED: 'OMITTED',\n  PASSING: 'PASSING',\n  SKIPPED: 'SKIPPED',\n  UNTESTED: 'UNTESTED',\n  WARNING: 'WARNING',\n};\n\nexport const TestAction = {\n  RESET: 'RESET',\n};\n\nexport type TestStatus = ValueOf<typeof TestStatus>;\nexport type TestAction = ValueOf<typeof TestAction>;\n\nexport type TestStateMachineAction = TestAction | TestStatus;\n\nconst machine: TStateMachine<TestStatus, TestStateMachineAction> = {\n  initial: TestStatus.UNTESTED,\n  states: {\n    '*': {\n      [TestStatus.OMITTED]: TestStatus.OMITTED,\n      [TestAction.RESET]: TestStatus.UNTESTED,\n    },\n    [TestStatus.UNTESTED]: {\n      [TestStatus.CANCELED]: TestStatus.CANCELED,\n      [TestStatus.FAILED]: TestStatus.FAILED,\n\n      [TestStatus.PASSING]: TestStatus.PASSING,\n      [TestStatus.PENDING]: TestStatus.PENDING,\n      [TestStatus.SKIPPED]: TestStatus.SKIPPED,\n      [TestStatus.WARNING]: TestStatus.WARNING,\n    },\n    [TestStatus.PENDING]: {\n      [TestStatus.CANCELED]: TestStatus.CANCELED,\n      [TestStatus.FAILED]: TestStatus.FAILED,\n\n      [TestStatus.PASSING]: TestStatus.PASSING,\n      [TestStatus.SKIPPED]: [\n        TestStatus.SKIPPED,\n        (force?: boolean) => force === true,\n      ],\n      [TestStatus.WARNING]: TestStatus.WARNING,\n    },\n    [TestStatus.SKIPPED]: {},\n    [TestStatus.FAILED]: {},\n    [TestStatus.WARNING]: {},\n    [TestStatus.PASSING]: {},\n    [TestStatus.CANCELED]: {},\n    [TestStatus.OMITTED]: {},\n  },\n};\n\nexport const IsolateTestStateMachine = StateMachine<\n  TestStatus,\n  TestStateMachineAction\n>(machine);\n","import { CB } from 'vest-utils';\nimport { IsolateSerializer } from 'vestjs-runtime';\nimport { IsolateKeys } from 'vestjs-runtime/src/Isolate/IsolateKeys';\n\nimport { TIsolateSuite } from 'IsolateSuite';\nimport { TestStatus } from 'IsolateTestStateMachine';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { Suite } from 'SuiteTypes';\n\nexport type Dumpable = {\n  dump: CB<TIsolateSuite>;\n};\n\nexport class SuiteSerializer {\n  static serialize(suite: Dumpable) {\n    const dump = { ...suite.dump() };\n\n    return IsolateSerializer.serialize(dump, suiteSerializerReplacer);\n  }\n\n  static deserialize(\n    serialized: string | TIsolateSuite | Record<string, any>,\n  ): TIsolateSuite {\n    return IsolateSerializer.deserialize(serialized) as TIsolateSuite;\n  }\n\n  static resume(\n    suite: Suite<TFieldName, TGroupName>,\n    root: string | TIsolateSuite | Record<string, any>,\n  ): void {\n    const suiteRoot = SuiteSerializer.deserialize(root);\n\n    suite.resume(suiteRoot);\n  }\n}\n\nfunction suiteSerializerReplacer(value: any, key: string) {\n  if (key === 'output') {\n    return undefined;\n  }\n\n  if (key === IsolateKeys.Status) {\n    if (AllowedStatuses.has(value)) {\n      return value;\n    }\n\n    return undefined;\n  }\n\n  if (DisallowedKeys.has(key)) {\n    return undefined;\n  }\n\n  return value;\n}\n\nconst AllowedStatuses = new Set([\n  TestStatus.FAILED,\n  TestStatus.PASSING,\n  TestStatus.WARNING,\n]);\n\nconst DisallowedKeys = new Set(['focusMode', 'match', 'matchAll', 'severity']);\n"],"names":["IsolateKeys","Set","AbortController","Parent","Keys","CommonStates","State","CommonStates_PENDING","CommonStates_INITIAL","CommonStates_DONE","machine","initial","INITIAL","states","DONE","PENDING","StateMachine","TestStatus","CANCELED","FAILED","OMITTED","PASSING","SKIPPED","UNTESTED","WARNING","RESET","force","SuiteSerializer","serialize","suite","dump","Object","assign","IsolateSerializer","suiteSerializerReplacer","deserialize","serialized","resume","root","suiteRoot","value","key","Status","AllowedStatuses","has","DisallowedKeys"],"mappings":"6WAAA,IAAYA,GAAZ,SAAYA,GACVA,EAAA,KAAA,QACAA,EAAA,KAAA,OACAA,EAAA,IAAA,MACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,aAAA,eACAA,EAAA,OAAA,SACAA,EAAA,gBAAA,kBACAA,EAAA,SAAA,UACD,CAVD,CAAYA,IAAAA,EAUX,CAAA,IAE+B,IAAIC,IAAI,CACtCD,EAAYE,gBACZF,EAAYG,OACZH,EAAYI,OCbP,MAAMC,EACF,UADEA,EAEF,UAFEA,EAGL,OAGFC,EAAQ,CACZC,CAACF,GAAuBA,EACxBG,CAACH,GAAuBA,EACxBI,CAACJ,GAAoBA,GAKjBK,EAAgC,CACpCC,QAASL,EAAMM,QACfC,OAAQ,CACN,CAACP,EAAMQ,MAAO,CAAE,EAChB,CAACR,EAAMM,SAAU,CACf,CAACN,EAAMS,SAAUT,EAAMS,QACvB,CAACT,EAAMQ,MAAOR,EAAMQ,MAEtB,CAACR,EAAMS,SAAU,CACf,CAACT,EAAMQ,MAAOR,EAAMQ,QAKQE,EAAAA,aAAoBN,GC1B/C,MAAMO,EAAa,CACxBV,CAACF,GAAuBA,EACxBa,SAAU,WACVC,OAAQ,SACRC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,SAAU,WACVC,QAAS,WAYLd,EAA6D,CACjEC,QAASM,EAAWM,SACpBV,OAAQ,CACN,IAAK,CACH,CAACI,EAAWG,SAAUH,EAAWG,QACjCK,MAAoBR,EAAWM,UAEjC,CAACN,EAAWM,UAAW,CACrB,CAACN,EAAWC,UAAWD,EAAWC,SAClC,CAACD,EAAWE,QAASF,EAAWE,OAEhC,CAACF,EAAWI,SAAUJ,EAAWI,QACjC,CAACJ,EAAWF,SAAUE,EAAWF,QACjC,CAACE,EAAWK,SAAUL,EAAWK,QACjC,CAACL,EAAWO,SAAUP,EAAWO,SAEnC,CAACP,EAAWF,SAAU,CACpB,CAACE,EAAWC,UAAWD,EAAWC,SAClC,CAACD,EAAWE,QAASF,EAAWE,OAEhC,CAACF,EAAWI,SAAUJ,EAAWI,QACjC,CAACJ,EAAWK,SAAU,CACpBL,EAAWK,QACVI,IAA8B,IAAVA,GAEvB,CAACT,EAAWO,SAAUP,EAAWO,SAEnC,CAACP,EAAWK,SAAU,CAAE,EACxB,CAACL,EAAWE,QAAS,CAAE,EACvB,CAACF,EAAWO,SAAU,CAAE,EACxB,CAACP,EAAWI,SAAU,CAAE,EACxB,CAACJ,EAAWC,UAAW,CAAE,EACzB,CAACD,EAAWG,SAAU,CAAE,IAIWJ,EAAAA,aAGrCN,SClDWiB,EACX,gBAAOC,CAAUC,GACf,MAAMC,EAAYC,OAAAC,OAAA,CAAA,EAAAH,EAAMC,QAExB,OAAOG,oBAAkBL,UAAUE,EAAMI,EAC1C,CAED,kBAAOC,CACLC,GAEA,OAAOH,EAAiBA,kBAACE,YAAYC,EACtC,CAED,aAAOC,CACLR,EACAS,GAEA,MAAMC,EAAYZ,EAAgBQ,YAAYG,GAE9CT,EAAMQ,OAAOE,EACd,EAGH,SAASL,EAAwBM,EAAYC,GAC3C,GAAY,WAARA,EAAJ,CAIA,GAAIA,IAAQzC,EAAY0C,OACtB,OAAIC,EAAgBC,IAAIJ,GACfA,OAGT,EAGF,IAAIK,EAAeD,IAAIH,GAIvB,OAAOD,CAdN,CAeH,CAEA,MAAMG,EAAkB,IAAI1C,IAAI,CAC9BgB,EAAWE,OACXF,EAAWI,QACXJ,EAAWO,UAGPqB,EAAiB,IAAI5C,IAAI,CAAC,YAAa,QAAS,WAAY"}