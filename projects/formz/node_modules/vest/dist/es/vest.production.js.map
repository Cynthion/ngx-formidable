{"version":3,"file":"vest.production.js","sources":["../../src/core/isolate/VestIsolateType.ts","../../src/core/isolate/IsolateSuite/IsolateSuite.ts","../../src/hooks/optional/OptionalTypes.ts","../../src/hooks/optional/Modes.ts","../../src/core/context/SuiteContext.ts","../../src/hooks/optional/optional.ts","../../src/errors/ErrorStrings.ts","../../src/core/StateMachines/CommonStateMachine.ts","../../src/core/StateMachines/IsolateTestStateMachine.ts","../../src/suiteResult/Severity.ts","../../src/hooks/focused/FocusedKeys.ts","../../src/core/isolate/VestIsolate.ts","../../src/core/isolate/IsolateTest/VestTest.ts","../../src/core/test/helpers/matchingFieldName.ts","../../src/core/isolate/IsolateTest/isSameProfileTest.ts","../../src/hooks/focused/focused.ts","../../src/suiteResult/SuiteResultTypes.ts","../../src/core/Runtime.ts","../../src/suiteResult/selectors/collectFailures.ts","../../src/suiteResult/selectors/suiteSelectors.ts","../../src/suiteResult/SummaryFailure.ts","../../src/core/isolate/IsolateTest/TestWalker.ts","../../src/suite/SuiteWalker.ts","../../src/core/test/helpers/matchingGroupName.ts","../../src/suiteResult/selectors/hasFailuresByTestObjects.ts","../../src/core/test/helpers/nonMatchingSeverityProfile.ts","../../src/suiteResult/selectors/shouldAddValidProperty.ts","../../src/suiteResult/selectors/useProduceSuiteSummary.ts","../../src/suiteResult/suiteResult.ts","../../src/suiteResult/selectors/LazyDraft.ts","../../src/isolates/skipWhen.ts","../../src/hooks/focused/useHasOnliedTests.ts","../../src/hooks/focused/useIsExcluded.ts","../../src/hooks/optional/mode.ts","../../src/isolates/omitWhen.ts","../../src/core/test/testLevelFlowControl/verifyTestRun.ts","../../src/core/isolate/IsolateTest/IsolateTestReconciler.ts","../../src/core/isolate/VestReconciler.ts","../../src/core/isolate/IsolateTest/cancelOverriddenPendingTest.ts","../../src/isolates/group.ts","../../src/hooks/include.ts","../../src/core/isolate/IsolateTest/IsolateTest.ts","../../src/core/test/testLevelFlowControl/runTest.ts","../../src/core/test/helpers/shouldUseErrorMessage.ts","../../src/core/test/test.ts","../../src/core/test/test.memo.ts","../../src/suite/getTypedMethods.ts","../../src/hooks/optional/omitOptionalFields.ts","../../src/core/VestBus/VestBus.ts","../../src/suite/runCallbacks.ts","../../src/suiteResult/suiteRunResult.ts","../../src/suiteResult/done/shouldSkipDoneRegistration.ts","../../src/suiteResult/done/deferDoneCallback.ts","../../src/suite/createSuite.ts","../../src/suite/validateParams/validateSuiteParams.ts","../../src/isolates/each.ts","../../src/core/isolate/IsolateEach/IsolateEach.ts","../../src/hooks/warn.ts"],"sourcesContent":["export const VestIsolateType = {\n  Each: 'Each',\n  Focused: 'Focused',\n  Group: 'Group',\n  OmitWhen: 'OmitWhen',\n  SkipWhen: 'SkipWhen',\n  Suite: 'Suite',\n  Test: 'Test',\n};\n","import { CB, assign } from 'vest-utils';\nimport { Isolate, TIsolate } from 'vestjs-runtime';\n\nimport { OptionalFieldDeclaration, OptionalFields } from 'OptionalTypes';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport type TIsolateSuite = TIsolate<{\n  optional: OptionalFields;\n}>;\n\nexport function IsolateSuite<Callback extends CB = CB>(\n  callback: Callback,\n): TIsolateSuite {\n  return Isolate.create(VestIsolateType.Suite, callback, {\n    optional: {},\n  });\n}\n\nexport class SuiteOptionalFields {\n  static setOptionalField(\n    suite: TIsolateSuite,\n    fieldName: TFieldName,\n    setter: (current: OptionalFieldDeclaration) => OptionalFieldDeclaration,\n  ): void {\n    const current = suite.data.optional;\n    const currentField = current[fieldName];\n\n    assign(current, {\n      [fieldName]: assign({}, currentField, setter(currentField)),\n    });\n  }\n\n  static getOptionalField(\n    suite: TIsolateSuite,\n    fieldName: TFieldName,\n  ): OptionalFieldDeclaration {\n    return SuiteOptionalFields.getOptionalFields(suite)[fieldName] ?? {};\n  }\n\n  static getOptionalFields(suite: TIsolateSuite): OptionalFields {\n    return suite.data?.optional ?? {};\n  }\n}\n","import { DynamicValue, OneOrMoreOf } from 'vest-utils';\n\nimport { TFieldName } from 'SuiteResultTypes';\n\nexport type OptionalFields = Record<string, OptionalFieldDeclaration>;\n\nexport type OptionalsInput<F extends TFieldName> =\n  | OneOrMoreOf<F>\n  | OptionalsObject<F>;\n\ntype OptionalsObject<F extends TFieldName> = Record<F, TOptionalRule | any>;\n\ntype ImmediateOptionalFieldDeclaration = {\n  type: OptionalFieldTypes.CUSTOM_LOGIC;\n  rule: TOptionalRule;\n  applied: boolean;\n};\n\ntype DelayedOptionalFieldDeclaration = {\n  type: OptionalFieldTypes.AUTO;\n  applied: boolean;\n  rule: null;\n};\n\ntype TOptionalRule = DynamicValue<boolean>;\n\nexport type OptionalFieldDeclaration =\n  | ImmediateOptionalFieldDeclaration\n  | DelayedOptionalFieldDeclaration;\n\nexport enum OptionalFieldTypes {\n  CUSTOM_LOGIC,\n  AUTO,\n}\n","export enum Modes {\n  EAGER = 'EAGER',\n  ALL = 'ALL',\n  ONE = 'ONE',\n}\n","import { createCascade } from 'context';\nimport {\n  assign,\n  TinyState,\n  tinyState,\n  cache,\n  CacheApi,\n  DynamicValue,\n} from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { Modes } from 'Modes';\n\nexport const SuiteContext = createCascade<CTXType>((ctxRef, parentContext) => {\n  if (parentContext) {\n    return null;\n  }\n\n  return assign(\n    {\n      inclusion: {},\n      mode: tinyState.createTinyState<Modes>(Modes.EAGER),\n      suiteParams: [],\n      testMemoCache,\n    },\n    ctxRef,\n  );\n});\n\ntype CTXType = {\n  inclusion: Record<string, DynamicValue<boolean>>;\n  mode: TinyState<Modes>;\n  suiteParams: any[];\n  testMemoCache: CacheApi<TIsolateTest>;\n  currentTest?: TIsolateTest;\n  groupName?: string;\n  skipped?: boolean;\n  omitted?: boolean;\n};\n\nexport function useCurrentTest(msg?: string) {\n  return SuiteContext.useX(msg).currentTest;\n}\n\nexport function useGroupName() {\n  return SuiteContext.useX().groupName;\n}\n\nexport function useInclusion() {\n  return SuiteContext.useX().inclusion;\n}\n\nexport function useMode() {\n  return SuiteContext.useX().mode();\n}\n\nexport function useSkipped() {\n  return SuiteContext.useX().skipped ?? false;\n}\n\nexport function useOmitted() {\n  return SuiteContext.useX().omitted ?? false;\n}\n\nconst testMemoCache = cache<TIsolateTest>(10);\n\nexport function useTestMemoCache() {\n  return SuiteContext.useX().testMemoCache;\n}\n\nexport function useSuiteParams() {\n  return SuiteContext.useX().suiteParams;\n}\n","import { enforce } from 'n4s';\nimport { isArray, isStringValue, asArray, hasOwnProperty } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport { SuiteOptionalFields, TIsolateSuite } from 'IsolateSuite';\nimport { OptionalFieldTypes, OptionalsInput } from 'OptionalTypes';\nimport { useSuiteParams } from 'SuiteContext';\nimport { TFieldName } from 'SuiteResultTypes';\n\n// @vx-allow use-use\nexport function optional<F extends TFieldName>(\n  optionals: OptionalsInput<F>,\n): void {\n  const suiteRoot = VestRuntime.useAvailableRoot<TIsolateSuite>();\n\n  const suiteParams = useSuiteParams();\n  const dataObject = suiteParams?.[0] ?? {};\n\n  // There are two types of optional field declarations:\n\n  // 1 AUTO: Vest will automatically determine whether the field should be omitted\n  // Based on the current run. Vest will omit \"auto\" added fields without any\n  // configuration if their tests did not run at all in the suite, or if the data object\n  // contains a blank value for the field.\n  //\n  // 2 Custom logic: Vest will determine whether they should fail based on the custom\n  // logic supplied by the developer.\n  // If the developer supplies a function - when the function returns true, the field will be omitted.\n  // If the developer supplies a boolean - the field will be omitted if the value is true.\n  // If the developer supplies a value - the field will be omitted if the value is blank.\n\n  // AUTO case (field name)\n  if (isArray(optionals) || isStringValue(optionals)) {\n    asArray(optionals).forEach(optionalField => {\n      SuiteOptionalFields.setOptionalField(suiteRoot, optionalField, () => ({\n        type: OptionalFieldTypes.AUTO,\n        applied: hasOwnProperty(dataObject, optionalField)\n          ? enforce.isBlank().test(dataObject?.[optionalField])\n          : false,\n        rule: null,\n      }));\n    });\n  } else {\n    // CUSTOM_LOGIC case (function or boolean)\n    for (const field in optionals) {\n      const value = optionals[field];\n\n      SuiteOptionalFields.setOptionalField(suiteRoot, field, () => ({\n        type: OptionalFieldTypes.CUSTOM_LOGIC,\n        rule: value,\n        applied: enforce.isBlank().test(value) || value === true,\n      }));\n    }\n  }\n}\n\nexport function useIsOptionalFieldApplied(fieldName?: TFieldName) {\n  if (!fieldName) {\n    return false;\n  }\n\n  const root = VestRuntime.useAvailableRoot<TIsolateSuite>();\n\n  return (\n    SuiteOptionalFields.getOptionalField(root, fieldName)?.applied ?? false\n  );\n}\n","export enum ErrorStrings {\n  HOOK_CALLED_OUTSIDE = 'hook called outside of a running suite.',\n  EXPECTED_VEST_TEST = 'Expected value to be an instance of IsolateTest',\n  FIELD_NAME_REQUIRED = 'Field name must be passed',\n  SUITE_MUST_BE_INITIALIZED_WITH_FUNCTION = 'Suite must be initialized with a function',\n  PROMISIFY_REQUIRE_FUNCTION = 'Vest.Promisify must be called with a function',\n  PARSER_EXPECT_RESULT_OBJECT = \"Vest parser: expected argument at position 0 to be Vest's result object.\",\n  WARN_MUST_BE_CALLED_FROM_TEST = 'Warn must be called from within the body of a test function',\n  EACH_CALLBACK_MUST_BE_A_FUNCTION = 'Each must be called with a function',\n  INVALID_PARAM_PASSED_TO_FUNCTION = 'Incompatible params passed to {fn_name} function. \"{param}\" must be of type {expected}',\n  TESTS_CALLED_IN_DIFFERENT_ORDER = `Vest Critical Error: Tests called in different order than previous run.\n    expected: {fieldName}\n    received: {prevName}\n    This can happen on one of two reasons:\n    1. You're using if/else statements to conditionally select tests. Instead, use \"skipWhen\".\n    2. You are iterating over a list of tests, and their order changed. Use \"each\" and a custom key prop so that Vest retains their state.`,\n  UNEXPECTED_TEST_REGISTRATION_ERROR = `Unexpected error encountered during test registration.\n      Please report this issue to Vest's Github repository.\n      Test Object: {testObject}.\n      Error: {error}.`,\n  UNEXPECTED_TEST_RUN_ERROR = `Unexpected error encountered during test run. Please report this issue to Vest's Github repository.\n      Test Object: {testObject}.`,\n  INCLUDE_SELF = 'Trying to call include.when on the same field.',\n}\n","import { StateMachine, TStateMachine, ValueOf } from 'vest-utils';\n\nexport const CommonStates = {\n  PENDING: 'PENDING',\n  INITIAL: 'INITIAL',\n  DONE: 'DONE',\n};\n\nconst State = {\n  [CommonStates.PENDING]: CommonStates.PENDING,\n  [CommonStates.INITIAL]: CommonStates.INITIAL,\n  [CommonStates.DONE]: CommonStates.DONE,\n};\n\nexport type State = ValueOf<typeof State>;\n\nconst machine: TStateMachine<State> = {\n  initial: State.INITIAL,\n  states: {\n    [State.DONE]: {},\n    [State.INITIAL]: {\n      [State.PENDING]: State.PENDING,\n      [State.DONE]: State.DONE,\n    },\n    [State.PENDING]: {\n      [State.DONE]: State.DONE,\n    },\n  },\n};\n\nexport const CommonStateMachine = StateMachine<State>(machine);\n","import { StateMachine, TStateMachine, ValueOf } from 'vest-utils';\n\nimport { CommonStates } from 'CommonStateMachine';\n\nexport const TestStatus = {\n  [CommonStates.PENDING]: CommonStates.PENDING,\n  CANCELED: 'CANCELED',\n  FAILED: 'FAILED',\n  OMITTED: 'OMITTED',\n  PASSING: 'PASSING',\n  SKIPPED: 'SKIPPED',\n  UNTESTED: 'UNTESTED',\n  WARNING: 'WARNING',\n};\n\nexport const TestAction = {\n  RESET: 'RESET',\n};\n\nexport type TestStatus = ValueOf<typeof TestStatus>;\nexport type TestAction = ValueOf<typeof TestAction>;\n\nexport type TestStateMachineAction = TestAction | TestStatus;\n\nconst machine: TStateMachine<TestStatus, TestStateMachineAction> = {\n  initial: TestStatus.UNTESTED,\n  states: {\n    '*': {\n      [TestStatus.OMITTED]: TestStatus.OMITTED,\n      [TestAction.RESET]: TestStatus.UNTESTED,\n    },\n    [TestStatus.UNTESTED]: {\n      [TestStatus.CANCELED]: TestStatus.CANCELED,\n      [TestStatus.FAILED]: TestStatus.FAILED,\n\n      [TestStatus.PASSING]: TestStatus.PASSING,\n      [TestStatus.PENDING]: TestStatus.PENDING,\n      [TestStatus.SKIPPED]: TestStatus.SKIPPED,\n      [TestStatus.WARNING]: TestStatus.WARNING,\n    },\n    [TestStatus.PENDING]: {\n      [TestStatus.CANCELED]: TestStatus.CANCELED,\n      [TestStatus.FAILED]: TestStatus.FAILED,\n\n      [TestStatus.PASSING]: TestStatus.PASSING,\n      [TestStatus.SKIPPED]: [\n        TestStatus.SKIPPED,\n        (force?: boolean) => force === true,\n      ],\n      [TestStatus.WARNING]: TestStatus.WARNING,\n    },\n    [TestStatus.SKIPPED]: {},\n    [TestStatus.FAILED]: {},\n    [TestStatus.WARNING]: {},\n    [TestStatus.PASSING]: {},\n    [TestStatus.CANCELED]: {},\n    [TestStatus.OMITTED]: {},\n  },\n};\n\nexport const IsolateTestStateMachine = StateMachine<\n  TestStatus,\n  TestStateMachineAction\n>(machine);\n","export enum Severity {\n  WARNINGS = 'warnings',\n  ERRORS = 'errors',\n}\n\nexport enum SeverityCount {\n  ERROR_COUNT = 'errorCount',\n  WARN_COUNT = 'warnCount',\n}\n\nexport function countKeyBySeverity(severity: Severity): SeverityCount {\n  return severity === Severity.ERRORS\n    ? SeverityCount.ERROR_COUNT\n    : SeverityCount.WARN_COUNT;\n}\n\nexport enum TestSeverity {\n  Error = 'error',\n  Warning = 'warning',\n}\n","export enum FocusModes {\n  ONLY,\n  SKIP,\n}\n","import { TStateMachineApi } from 'vest-utils';\nimport { TIsolate } from 'vestjs-runtime';\n\nimport { CommonStateMachine, CommonStates } from 'CommonStateMachine';\n\nexport class VestIsolate {\n  static stateMachine: TStateMachineApi = CommonStateMachine;\n\n  static getStatus(isolate: TIsolate): string {\n    return isolate.status ?? CommonStates.INITIAL;\n  }\n\n  static setStatus(isolate: TIsolate, status: string, payload?: any): void {\n    isolate.status = this.stateMachine.staticTransition(\n      VestIsolate.getStatus(isolate),\n      status,\n      payload,\n    );\n  }\n\n  static statusEquals(isolate: TIsolate, status: string): boolean {\n    return VestIsolate.getStatus(isolate) === status;\n  }\n\n  static setPending(isolate: TIsolate): void {\n    this.setStatus(isolate, CommonStates.PENDING);\n  }\n\n  static setDone(isolate: TIsolate): void {\n    this.setStatus(isolate, CommonStates.DONE);\n  }\n\n  static isPending(isolate: TIsolate): boolean {\n    return VestIsolate.statusEquals(isolate, CommonStates.PENDING);\n  }\n}\n","import { Maybe, invariant, isPromise, optionalFunctionValue } from 'vest-utils';\nimport { IsolateMutator, IsolateSelectors, TIsolate } from 'vestjs-runtime';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport type { TIsolateTest } from 'IsolateTest';\nimport {\n  IsolateTestStateMachine,\n  TestAction,\n  TestStatus,\n} from 'IsolateTestStateMachine';\nimport { TestSeverity } from 'Severity';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestIsolate } from 'VestIsolate';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport class VestTest extends VestIsolate {\n  static stateMachine = IsolateTestStateMachine;\n\n  // Read\n\n  static getData<\n    F extends TFieldName = TFieldName,\n    G extends TGroupName = TGroupName,\n  >(test: TIsolateTest<F, G>) {\n    invariant(test.data);\n    return test.data;\n  }\n\n  static is(isolate?: Maybe<TIsolate>): isolate is TIsolateTest {\n    return IsolateSelectors.isIsolateType<TIsolateTest>(\n      isolate,\n      VestIsolateType.Test,\n    );\n  }\n\n  static isX(isolate?: Maybe<TIsolate>): asserts isolate is TIsolateTest {\n    invariant(VestTest.is(isolate), ErrorStrings.EXPECTED_VEST_TEST);\n  }\n\n  static cast<F extends TFieldName = string, G extends TGroupName = string>(\n    isolate?: Maybe<TIsolate>,\n  ): TIsolateTest<F, G> {\n    VestTest.isX(isolate);\n    return isolate as TIsolateTest<F, G>;\n  }\n\n  static warns(test: TIsolateTest): boolean {\n    return VestTest.getData(test).severity === TestSeverity.Warning;\n  }\n\n  static isOmitted(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.OMITTED);\n  }\n\n  static isUntested(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.UNTESTED);\n  }\n\n  static isFailing(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.FAILED);\n  }\n\n  static isCanceled(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.CANCELED);\n  }\n\n  static isSkipped(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.SKIPPED);\n  }\n\n  static isPassing(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.PASSING);\n  }\n\n  static isWarning(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.WARNING);\n  }\n\n  static hasFailures(test: TIsolateTest): boolean {\n    return VestTest.isFailing(test) || VestTest.isWarning(test);\n  }\n\n  static isNonActionable(test: TIsolateTest): boolean {\n    return (\n      VestTest.isSkipped(test) ||\n      VestTest.isOmitted(test) ||\n      VestTest.isCanceled(test)\n    );\n  }\n\n  static isTested(test: TIsolateTest): boolean {\n    return VestTest.hasFailures(test) || VestTest.isPassing(test);\n  }\n\n  static awaitsResolution(test: TIsolateTest): boolean {\n    // Is the test in a state where it can still be run, or complete running\n    // and its final status is indeterminate?\n    return (\n      VestTest.isSkipped(test) ||\n      VestTest.isUntested(test) ||\n      VestTest.isPending(test)\n    );\n  }\n\n  static isAsyncTest(test: TIsolateTest): boolean {\n    return isPromise(VestTest.getData(test).asyncTest);\n  }\n\n  // Mutate\n\n  // static setPending(test: TIsolateTest) {\n  //   this.setStatus(test, TestStatus.PENDING);\n  // }\n\n  static fail(test: TIsolateTest): void {\n    VestTest.setStatus(\n      test,\n      VestTest.warns(test) ? TestStatus.WARNING : TestStatus.FAILED,\n    );\n  }\n\n  static pass(test: TIsolateTest): void {\n    VestTest.setStatus(test, TestStatus.PASSING);\n  }\n\n  static warn(test: TIsolateTest): void {\n    VestTest.setData(test, current => ({\n      ...current,\n      severity: TestSeverity.Warning,\n    }));\n  }\n\n  static setData(\n    test: TIsolateTest,\n    setter:\n      | ((current: TIsolateTest['data']) => TIsolateTest['data'])\n      | TIsolateTest['data'],\n  ): void {\n    test.data = optionalFunctionValue(setter, VestTest.getData(test));\n  }\n\n  static skip(test: TIsolateTest, force?: boolean): void {\n    // Without this force flag, the test will be marked as skipped even if it is pending.\n    // This means that it will not be counted in \"allIncomplete\" and its done callbacks\n    // will not be called, or will be called prematurely.\n    // What this mostly say is that when we have a pending test for one field, and we then\n    // start typing in a different field - the pending test will be canceled, which\n    // is usually an unwanted behavior.\n    // The only scenario in which we DO want to cancel the async test regardless\n    // is when we specifically skip a test with `skipWhen`, which is handled by the\n    // \"force\" boolean flag.\n    // I am not a fan of this flag, but it gets the job done.\n    VestTest.setStatus(test, TestStatus.SKIPPED, force);\n  }\n\n  static cancel(test: TIsolateTest): void {\n    VestTest.setStatus(test, TestStatus.CANCELED);\n    IsolateMutator.abort(test, TestStatus.CANCELED);\n  }\n\n  static omit(test: TIsolateTest): void {\n    VestTest.setStatus(test, TestStatus.OMITTED);\n  }\n\n  static reset(test: TIsolateTest): void {\n    VestTest.setStatus(test, TestAction.RESET);\n  }\n}\n","import { Maybe } from 'vest-utils';\n\nimport { TFieldName } from 'SuiteResultTypes';\nimport { WithFieldName } from 'TestTypes';\n\nexport function nonMatchingFieldName(\n  WithFieldName: WithFieldName<TFieldName>,\n  fieldName?: Maybe<TFieldName>,\n): boolean {\n  return !!fieldName && !matchingFieldName(WithFieldName, fieldName);\n}\n\nexport default function matchingFieldName(\n  WithFieldName: WithFieldName<TFieldName>,\n  fieldName?: Maybe<TFieldName>,\n): boolean {\n  return !!(fieldName && WithFieldName.fieldName === fieldName);\n}\n\nexport function matchesOrHasNoFieldName(\n  WithFieldName: WithFieldName<TFieldName>,\n  fieldName?: Maybe<TFieldName>,\n): boolean {\n  if (fieldName) {\n    return matchingFieldName(WithFieldName, fieldName);\n  }\n  return true;\n}\n","import { TIsolateTest } from 'IsolateTest';\nimport { VestTest } from 'VestTest';\nimport matchingFieldName from 'matchingFieldName';\n\nexport function isSameProfileTest(\n  testObject1: TIsolateTest,\n  testObject2: TIsolateTest,\n): boolean {\n  const { groupName: gn1 } = VestTest.getData(testObject1);\n  const { groupName: gn2, fieldName: fn2 } = VestTest.getData(testObject2);\n  return (\n    matchingFieldName(VestTest.getData(testObject1), fn2) &&\n    gn1 === gn2 &&\n    // Specifically using == here. The reason is that when serializing\n    // suite result, empty key gets removed, but it can also be null.\n    testObject1.key == testObject2.key\n  );\n}\n","import {\n  asArray,\n  Maybe,\n  OneOrMoreOf,\n  noop,\n  Nullable,\n  isNotEmpty,\n  isStringValue,\n} from 'vest-utils';\nimport { IsolateSelectors, TIsolate, Isolate } from 'vestjs-runtime';\n\nimport { FocusModes } from 'FocusedKeys';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport type ExclusionItem = Maybe<OneOrMoreOf<string>>;\nexport type FieldExclusion<F extends TFieldName> = Maybe<OneOrMoreOf<F>>;\nexport type GroupExclusion<G extends TGroupName> = Maybe<OneOrMoreOf<G>>;\n\nexport type TIsolateFocused = TIsolate<IsolateFocusedPayload>;\n\nexport type IsolateFocusedPayload = {\n  focusMode: FocusModes;\n  match: FieldExclusion<TFieldName>;\n  matchAll: boolean;\n};\n\nexport function IsolateFocused(\n  focusMode: FocusModes,\n  match?: true | FieldExclusion<TFieldName>,\n): TIsolateFocused {\n  return Isolate.create(VestIsolateType.Focused, noop, {\n    focusMode,\n    match: asArray(match).filter(isStringValue),\n    matchAll: match === true,\n  });\n}\n\nexport class FocusSelectors {\n  static isSkipFocused(\n    focus: Nullable<TIsolateFocused>,\n    fieldName?: TFieldName,\n  ): boolean {\n    return (\n      focus?.data.focusMode === FocusModes.SKIP &&\n      (hasFocus(focus, fieldName) || focus.data.matchAll === true)\n    );\n  }\n  static isOnlyFocused(\n    focus: Nullable<TIsolateFocused>,\n    fieldName?: TFieldName,\n  ): boolean {\n    return (\n      focus?.data.focusMode === FocusModes.ONLY && hasFocus(focus, fieldName)\n    );\n  }\n\n  static isIsolateFocused(isolate: TIsolate): isolate is TIsolateFocused {\n    return IsolateSelectors.isIsolateType(isolate, VestIsolateType.Focused);\n  }\n}\n\n/**\n * Adds a field or a list of fields into the inclusion list\n *\n * @example\n *\n * only('username');\n */\n// @vx-allow use-use\nexport function only(match: FieldExclusion<TFieldName> | false) {\n  return IsolateFocused(FocusModes.ONLY, defaultMatch(match));\n}\n/**\n * Adds a field or a list of fields into the exclusion list\n *\n * @example\n *\n * skip('username');\n */\n// @vx-allow use-use\nexport function skip(match: FieldExclusion<TFieldName> | boolean) {\n  return IsolateFocused(FocusModes.SKIP, defaultMatch(match));\n}\n\nfunction defaultMatch(match: FieldExclusion<TFieldName> | boolean) {\n  return match === false ? [] : match;\n}\n\nfunction hasFocus(focus: Nullable<TIsolateFocused>, fieldName?: TFieldName) {\n  return (\n    isNotEmpty(focus?.data.match) &&\n    (fieldName ? focus?.data.match?.includes(fieldName) ?? true : true)\n  );\n}\n","import { Maybe, Nullable } from 'vest-utils';\n\nimport { Severity } from 'Severity';\nimport { SummaryFailure } from 'SummaryFailure';\nimport { Done } from 'suiteRunResult';\nimport { SuiteSelectors } from 'suiteSelectors';\n\nexport class SummaryBase {\n  public errorCount = 0;\n  public warnCount = 0;\n  public testCount = 0;\n  public pendingCount = 0;\n}\n\nexport class SuiteSummary<\n  F extends TFieldName,\n  G extends TGroupName,\n> extends SummaryBase {\n  public [Severity.ERRORS]: SummaryFailure<F, G>[] = [];\n  public [Severity.WARNINGS]: SummaryFailure<F, G>[] = [];\n  public groups: Groups<G, F> = {} as Groups<G, F>;\n  public tests: Tests<F> = {} as Tests<F>;\n  public valid: Nullable<boolean> = null;\n}\n\nexport type TestsContainer<F extends TFieldName, G extends TGroupName> =\n  | Group<G>\n  | Tests<F>;\nexport type GroupTestSummary = SingleTestSummary;\n\nexport type Groups<G extends TGroupName, F extends TFieldName> = Record<\n  G,\n  Group<F>\n>;\nexport type Group<F extends TFieldName> = Record<F, GroupTestSummary>;\nexport type Tests<F extends TFieldName> = Record<F, SingleTestSummary>;\n\nexport type SingleTestSummary = SummaryBase & {\n  errors: string[];\n  warnings: string[];\n  valid: Nullable<boolean>;\n  pendingCount: number;\n};\n\nexport type GetFailuresResponse = FailureMessages | string[];\n\nexport type FailureMessages = Record<string, string[]>;\n\nexport type SuiteResult<\n  F extends TFieldName,\n  G extends TGroupName,\n> = SuiteSummary<F, G> & SuiteSelectors<F, G> & { suiteName: SuiteName };\n\nexport type SuiteRunResult<\n  F extends TFieldName,\n  G extends TGroupName,\n> = SuiteResult<F, G> & {\n  done: Done<F, G>;\n};\n\nexport type SuiteName = Maybe<string>;\n\nexport type TFieldName<T extends string = string> = T;\nexport type TGroupName<G extends string = string> = G;\n","import {\n  CB,\n  CacheApi,\n  Maybe,\n  TinyState,\n  cache,\n  seq,\n  tinyState,\n} from 'vest-utils';\nimport { IRecociler, TIsolate, VestRuntime } from 'vestjs-runtime';\n\nimport { TIsolateSuite } from 'IsolateSuite';\nimport { Severity } from 'Severity';\nimport {\n  SuiteName,\n  SuiteResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\n\nexport type DoneCallback = (res: SuiteResult<TFieldName, TGroupName>) => void;\ntype FieldCallbacks = Record<string, DoneCallbacks>;\ntype DoneCallbacks = Array<DoneCallback>;\ntype FailuresCache = {\n  [Severity.ERRORS]: Record<TFieldName, TIsolate[]>;\n  [Severity.WARNINGS]: Record<TFieldName, TIsolate[]>;\n};\nexport type PreAggCache = {\n  pending: TIsolate[];\n  failures: FailuresCache;\n};\n\ntype StateExtra = {\n  doneCallbacks: TinyState<DoneCallbacks>;\n  fieldCallbacks: TinyState<FieldCallbacks>;\n  suiteName: Maybe<string>;\n  suiteId: string;\n  suiteResultCache: CacheApi<SuiteResult<TFieldName, TGroupName>>;\n  preAggCache: CacheApi<PreAggCache>;\n};\nconst suiteResultCache = cache<SuiteResult<TFieldName, TGroupName>>();\nconst preAggCache = cache<PreAggCache>();\n\nexport function useCreateVestState({\n  suiteName,\n  VestReconciler,\n}: {\n  suiteName?: SuiteName;\n  VestReconciler: IRecociler;\n}) {\n  const stateRef: StateExtra = {\n    doneCallbacks: tinyState.createTinyState<DoneCallbacks>(() => []),\n    fieldCallbacks: tinyState.createTinyState<FieldCallbacks>(() => ({})),\n    preAggCache,\n    suiteId: seq(),\n    suiteName,\n    suiteResultCache,\n  };\n\n  return VestRuntime.createRef(VestReconciler, stateRef);\n}\n\nfunction useX() {\n  return VestRuntime.useXAppData<StateExtra>();\n}\n\nexport function useDoneCallbacks() {\n  return useX().doneCallbacks();\n}\n\nexport function useFieldCallbacks() {\n  return useX().fieldCallbacks();\n}\n\nexport function useSuiteName() {\n  return useX().suiteName;\n}\n\nexport function useSuiteId() {\n  return useX().suiteId;\n}\n\nexport function useSuiteResultCache<F extends TFieldName, G extends TGroupName>(\n  action: CB<SuiteResult<F, G>>,\n): SuiteResult<F, G> {\n  const suiteResultCache = useX().suiteResultCache;\n\n  return suiteResultCache([useSuiteId()], action) as SuiteResult<F, G>;\n}\n\nexport function usePreAggCache(action: CB<PreAggCache>) {\n  const preAggCache = useX().preAggCache;\n\n  return preAggCache([useSuiteId()], action);\n}\n\nexport function useExpireSuiteResultCache() {\n  const suiteResultCache = useX().suiteResultCache;\n  suiteResultCache.invalidate([useSuiteId()]);\n\n  // whenever we invalidate the entire result, we also want to invalidate the preagg cache\n  // so that we do not get stale results there.\n  // there may be a better place to do this, but for now, this should work.\n  preAggCache.invalidate([useSuiteId()]);\n}\n\nexport function useResetCallbacks() {\n  const [, , resetDoneCallbacks] = useDoneCallbacks();\n  const [, , resetFieldCallbacks] = useFieldCallbacks();\n\n  resetDoneCallbacks();\n  resetFieldCallbacks();\n}\n\nexport function useResetSuite() {\n  useResetCallbacks();\n  VestRuntime.reset();\n}\n\nexport function useLoadSuite(rootNode: TIsolateSuite): void {\n  VestRuntime.useSetHistoryRoot(rootNode);\n  useExpireSuiteResultCache();\n}\n","import { isPositive } from 'vest-utils';\n\nimport { countKeyBySeverity, Severity } from 'Severity';\nimport {\n  FailureMessages,\n  TestsContainer,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\n\n// calls collectAll or getByFieldName depending on whether fieldName is provided\n\nexport function gatherFailures(\n  testGroup: TestsContainer<TFieldName, TGroupName>,\n  severityKey: Severity,\n  fieldName?: TFieldName,\n): string[] | FailureMessages {\n  return fieldName\n    ? getByFieldName(testGroup, severityKey, fieldName)\n    : collectAll(testGroup, severityKey);\n}\n\nfunction getByFieldName(\n  testGroup: TestsContainer<TFieldName, TGroupName>,\n  severityKey: Severity,\n  fieldName: TFieldName,\n): string[] {\n  return testGroup?.[fieldName]?.[severityKey] || [];\n}\n\nfunction collectAll(\n  testGroup: TestsContainer<TFieldName, TGroupName>,\n  severityKey: Severity,\n): FailureMessages {\n  const output: FailureMessages = {};\n\n  const countKey = countKeyBySeverity(severityKey);\n\n  for (const field in testGroup) {\n    if (isPositive(testGroup[field][countKey])) {\n      // We will probably never get to the fallback array\n      // leaving it just in case the implementation changes\n      output[field] = testGroup[field][severityKey] || [];\n    }\n  }\n\n  return output;\n}\n","import { Maybe, greaterThan, isPositive } from 'vest-utils';\n\nimport { Severity, SeverityCount } from 'Severity';\nimport {\n  FailureMessages,\n  GetFailuresResponse,\n  SuiteResult,\n  SuiteSummary,\n  TFieldName,\n  TGroupName,\n  TestsContainer,\n} from 'SuiteResultTypes';\nimport { SummaryFailure } from 'SummaryFailure';\nimport { gatherFailures } from 'collectFailures';\nimport matchingFieldName from 'matchingFieldName';\n\nexport function bindSuiteSelectors<F extends TFieldName, G extends TGroupName>(\n  get: <F extends string, G extends string>() => SuiteResult<F, G>,\n): SuiteSelectors<F, G> {\n  return {\n    getError: (...args: Parameters<SuiteSelectors<F, G>['getError']>) =>\n      get().getError(...args),\n    getErrors: (...args: Parameters<SuiteSelectors<F, G>['getErrors']>) =>\n      get().getErrors(...args),\n    getErrorsByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['getErrorsByGroup']>\n    ) => get().getErrorsByGroup(...args),\n    getMessage: (...args: Parameters<SuiteSelectors<F, G>['getMessage']>) =>\n      get().getMessage(...args),\n    getWarning: (...args: Parameters<SuiteSelectors<F, G>['getWarning']>) =>\n      get().getWarning(...args),\n    getWarnings: (...args: Parameters<SuiteSelectors<F, G>['getWarnings']>) =>\n      get().getWarnings(...args),\n    getWarningsByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['getWarningsByGroup']>\n    ) => get().getWarningsByGroup(...args),\n    hasErrors: (...args: Parameters<SuiteSelectors<F, G>['hasErrors']>) =>\n      get().hasErrors(...args),\n    hasErrorsByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['hasErrorsByGroup']>\n    ) => get().hasErrorsByGroup(...args),\n    hasWarnings: (...args: Parameters<SuiteSelectors<F, G>['hasWarnings']>) =>\n      get().hasWarnings(...args),\n    hasWarningsByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['hasWarningsByGroup']>\n    ) => get().hasWarningsByGroup(...args),\n    isPending: (...args: Parameters<SuiteSelectors<F, G>['isPending']>) => {\n      return get().isPending(...args);\n    },\n    isTested: (...args: Parameters<SuiteSelectors<F, G>['isTested']>) =>\n      get().isTested(...args),\n    isValid: (...args: Parameters<SuiteSelectors<F, G>['isValid']>) =>\n      get().isValid(...args),\n    isValidByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['isValidByGroup']>\n    ) => get().isValidByGroup(...args),\n  } as SuiteSelectors<F, G>;\n}\n\n// eslint-disable-next-line max-lines-per-function, max-statements\nexport function suiteSelectors<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>,\n): SuiteSelectors<F, G> {\n  const selectors = {\n    getError,\n    getErrors,\n    getErrorsByGroup,\n    getMessage,\n    getWarning,\n    getWarnings,\n    getWarningsByGroup,\n    hasErrors,\n    hasErrorsByGroup,\n    hasWarnings,\n    hasWarningsByGroup,\n    isPending,\n    isTested,\n    isValid,\n    isValidByGroup,\n  };\n\n  return selectors;\n\n  // Booleans\n\n  function isValid(fieldName?: F): boolean {\n    return Boolean(fieldName ? summary.tests[fieldName]?.valid : summary.valid);\n  }\n\n  function isValidByGroup(groupName: G, fieldName?: F): boolean {\n    const group = summary.groups[groupName];\n\n    if (!group) {\n      return false;\n    }\n\n    if (fieldName) {\n      return isFieldValid(group, fieldName);\n    }\n    for (const fieldName in group) {\n      if (!isFieldValid(group, fieldName)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function hasWarnings(fieldName?: F): boolean {\n    return hasFailures(summary, SeverityCount.WARN_COUNT, fieldName);\n  }\n\n  function hasErrors(fieldName?: F): boolean {\n    return hasFailures(summary, SeverityCount.ERROR_COUNT, fieldName);\n  }\n\n  function isTested(fieldName: F): boolean {\n    return isPositive(summary.tests[fieldName]?.testCount);\n  }\n\n  function hasWarningsByGroup<G extends TGroupName>(\n    groupName: G,\n    fieldName?: F,\n  ): boolean {\n    return hasFailuresByGroup(\n      summary,\n      SeverityCount.WARN_COUNT,\n      groupName,\n      fieldName,\n    );\n  }\n\n  function hasErrorsByGroup<G extends TGroupName>(\n    groupName: G,\n    fieldName?: F,\n  ): boolean {\n    return hasFailuresByGroup(\n      summary,\n      SeverityCount.ERROR_COUNT,\n      groupName,\n      fieldName,\n    );\n  }\n\n  // Responses\n\n  function getWarnings(): FailureMessages;\n  function getWarnings(fieldName: F): string[];\n  function getWarnings(fieldName?: F): GetFailuresResponse {\n    return getFailures(summary, Severity.WARNINGS, fieldName);\n  }\n\n  function getWarning(): Maybe<SummaryFailure<F, G>>;\n  function getWarning(fieldName: F): Maybe<string>;\n  function getWarning(fieldName?: F): Maybe<SummaryFailure<F, G> | string> {\n    return getFailure<F, G>(Severity.WARNINGS, summary, fieldName as F);\n  }\n\n  function getErrors(): FailureMessages;\n  function getErrors(fieldName: F): string[];\n  function getErrors(fieldName?: F): GetFailuresResponse {\n    return getFailures(summary, Severity.ERRORS, fieldName);\n  }\n\n  function getError(): Maybe<SummaryFailure<F, G>>;\n  function getError(fieldName: F): Maybe<string>;\n  function getError(fieldName?: F): Maybe<SummaryFailure<F, G> | string> {\n    return getFailure<F, G>(Severity.ERRORS, summary, fieldName as F);\n  }\n\n  function getErrorsByGroup(groupName: G): FailureMessages;\n  function getErrorsByGroup(groupName: G, fieldName: F): string[];\n  function getErrorsByGroup(groupName: G, fieldName?: F): GetFailuresResponse {\n    return getFailuresByGroup(summary, Severity.ERRORS, groupName, fieldName);\n  }\n\n  function getMessage(fieldName: F): Maybe<string> {\n    return getError(fieldName) || getWarning(fieldName);\n  }\n\n  function getWarningsByGroup(groupName: G): FailureMessages;\n  function getWarningsByGroup(groupName: G, fieldName: F): string[];\n  function getWarningsByGroup(\n    groupName: G,\n    fieldName?: F,\n  ): GetFailuresResponse {\n    return getFailuresByGroup(summary, Severity.WARNINGS, groupName, fieldName);\n  }\n\n  function isPending(fieldName?: F): boolean {\n    return fieldName\n      ? greaterThan(summary.tests[fieldName]?.pendingCount, 0)\n      : greaterThan(summary.pendingCount, 0);\n  }\n}\n\nexport interface SuiteSelectors<F extends TFieldName, G extends TGroupName> {\n  getWarning(): SummaryFailure<F, G> | undefined;\n  getWarning(fieldName: F): string | undefined;\n  getWarning(fieldName?: F): SummaryFailure<F, G> | string | undefined;\n  getError(): SummaryFailure<F, G> | undefined;\n  getError(fieldName: F): string | undefined;\n  getError(fieldName?: F): SummaryFailure<F, G> | string | undefined;\n  getMessage(fieldName: F): string | undefined;\n  getErrors(): FailureMessages;\n  getErrors(fieldName: F): string[];\n  getErrors(fieldName?: F): string[] | FailureMessages;\n  getWarnings(): FailureMessages;\n  getWarnings(fieldName: F): string[];\n  getWarnings(fieldName?: F): string[] | FailureMessages;\n  getErrorsByGroup(groupName: G): FailureMessages;\n  getErrorsByGroup(groupName: G, fieldName: F): string[];\n  getErrorsByGroup(groupName: G, fieldName?: F): string[] | FailureMessages;\n  getWarningsByGroup(groupName: G): FailureMessages;\n  getWarningsByGroup(groupName: G, fieldName: F): string[];\n  getWarningsByGroup(groupName: G, fieldName?: F): string[] | FailureMessages;\n  hasErrors(fieldName?: F): boolean;\n  hasWarnings(fieldName?: F): boolean;\n  hasErrorsByGroup(groupName: G, fieldName?: F): boolean;\n  hasWarningsByGroup(groupName: G, fieldName?: F): boolean;\n  isTested(fieldName: F): boolean;\n  isPending(fieldName?: F): boolean;\n  isValid(fieldName?: F): boolean;\n  isValidByGroup(groupName: G, fieldName?: F): boolean;\n}\n\n// Gathers all failures of a given severity\n// With a fieldName, it will only gather failures for that field\nfunction getFailures<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>,\n  severityKey: Severity,\n): FailureMessages;\nfunction getFailures<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>,\n  severityKey: Severity,\n  fieldName?: TFieldName,\n): string[];\nfunction getFailures<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>,\n  severityKey: Severity,\n  fieldName?: TFieldName,\n): GetFailuresResponse {\n  return gatherFailures(summary.tests, severityKey, fieldName);\n}\n\n// Gathers all failures of a given severity within a group\n// With a fieldName, it will only gather failures for that field\nfunction getFailuresByGroup(\n  summary: SuiteSummary<TFieldName, TGroupName>,\n  severityKey: Severity,\n  groupName: TGroupName,\n  fieldName?: TFieldName,\n): GetFailuresResponse {\n  return gatherFailures(summary.groups[groupName], severityKey, fieldName);\n}\n// Checks if a field is valid within a container object - can be within a group or top level\nfunction isFieldValid(\n  testContainer: TestsContainer<TFieldName, TGroupName>,\n  fieldName: TFieldName,\n): boolean {\n  return !!testContainer[fieldName]?.valid;\n}\n\n// Checks if a there are any failures of a given severity within a group\n// If a fieldName is provided, it will only check for failures within that field\nfunction hasFailuresByGroup(\n  summary: SuiteSummary<TFieldName, TGroupName>,\n  severityCount: SeverityCount,\n  groupName: TGroupName,\n  fieldName?: TFieldName,\n): boolean {\n  const group = summary.groups[groupName];\n\n  if (!group) {\n    return false;\n  }\n\n  if (fieldName) {\n    return isPositive(group[fieldName]?.[severityCount]);\n  }\n\n  for (const field in group) {\n    if (isPositive(group[field]?.[severityCount])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Checks if there are any failures of a given severity\n// If a fieldName is provided, it will only check for failures within that field\nfunction hasFailures(\n  summary: SuiteSummary<TFieldName, TGroupName>,\n  countKey: SeverityCount,\n  fieldName?: TFieldName,\n): boolean {\n  const failureCount = fieldName\n    ? summary.tests[fieldName]?.[countKey]\n    : summary[countKey] || 0;\n\n  return isPositive(failureCount);\n}\n\nfunction getFailure<F extends TFieldName, G extends TGroupName>(\n  severity: Severity,\n  summary: SuiteSummary<F, G>,\n): Maybe<SummaryFailure<F, G>>;\nfunction getFailure<F extends TFieldName, G extends TGroupName>(\n  severity: Severity,\n  summary: SuiteSummary<F, G>,\n  fieldName: F,\n): Maybe<string>;\nfunction getFailure<F extends TFieldName, G extends TGroupName>(\n  severity: Severity,\n  summary: SuiteSummary<F, G>,\n  fieldName?: F,\n): Maybe<SummaryFailure<F, G> | string> {\n  const summaryKey = summary[severity];\n\n  if (!fieldName) {\n    return summaryKey[0];\n  }\n\n  return summaryKey.find(\n    (summaryFailure: SummaryFailure<TFieldName, TGroupName>) =>\n      matchingFieldName(summaryFailure, fieldName),\n  )?.message;\n}\n","import { TIsolateTest } from 'IsolateTest';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { WithFieldName } from 'TestTypes';\nimport { VestTest } from 'VestTest';\n\nexport class SummaryFailure<F extends TFieldName, G extends TGroupName>\n  implements WithFieldName<F>\n{\n  constructor(\n    public fieldName: F,\n    public message: string | undefined,\n    public groupName: G | undefined,\n  ) {}\n\n  static fromTestObject<F extends TFieldName, G extends TGroupName>(\n    testObject: TIsolateTest<F, G>,\n  ) {\n    const { fieldName, message, groupName } = VestTest.getData(testObject);\n\n    return new SummaryFailure(fieldName, message, groupName);\n  }\n}\n","import { Nullable } from 'vest-utils';\nimport { Walker, VestRuntime, TIsolate } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestTest } from 'VestTest';\nimport matchingFieldName from 'matchingFieldName';\n\ntype MaybeRoot = Nullable<TIsolate>;\n\nexport class TestWalker {\n  static defaultRoot = VestRuntime.useAvailableRoot;\n\n  static hasNoTests(root: MaybeRoot = TestWalker.defaultRoot()): boolean {\n    if (!root) return true;\n    return !Walker.has(root, VestTest.is);\n  }\n\n  static someTests(\n    predicate: (test: TIsolateTest) => boolean,\n    root: MaybeRoot = TestWalker.defaultRoot(),\n  ): boolean {\n    if (!root) return false;\n    return Walker.some(\n      root,\n      isolate => {\n        VestTest.isX(isolate);\n\n        return predicate(isolate);\n      },\n      VestTest.is,\n    );\n  }\n\n  static everyTest(\n    predicate: (test: TIsolateTest) => boolean,\n    root: MaybeRoot = TestWalker.defaultRoot(),\n  ): boolean {\n    if (!root) return false;\n    return Walker.every(\n      root,\n      isolate => {\n        VestTest.isX(isolate);\n\n        return predicate(isolate);\n      },\n      VestTest.is,\n    );\n  }\n\n  static walkTests<F extends TFieldName, G extends TGroupName>(\n    callback: (test: TIsolateTest<F, G>, breakout: () => void) => void,\n    root: MaybeRoot = TestWalker.defaultRoot(),\n  ): void {\n    if (!root) return;\n    Walker.walk(\n      root,\n      (isolate, breakout) => {\n        callback(VestTest.cast<F, G>(isolate), breakout);\n      },\n      VestTest.is,\n    );\n  }\n\n  static reduceTests<T, I extends TIsolateTest = TIsolateTest>(\n    callback: (acc: T, test: I, breakout: () => void) => T,\n    initialValue: T,\n    root: MaybeRoot = TestWalker.defaultRoot(),\n  ): T {\n    if (!root) return initialValue;\n    return Walker.reduce(\n      root,\n      (acc, isolate, breakout) => {\n        return callback(acc, VestTest.cast(isolate) as I, breakout);\n      },\n      initialValue,\n      VestTest.is,\n    );\n  }\n\n  static pluckTests(\n    predicate: (test: TIsolateTest) => boolean,\n    root: MaybeRoot = TestWalker.defaultRoot(),\n  ): void {\n    if (!root) return;\n    Walker.pluck(\n      root,\n      isolate => {\n        VestTest.isX(isolate);\n\n        return predicate(isolate);\n      },\n      VestTest.is,\n    );\n  }\n\n  static resetField(fieldName: TFieldName): void {\n    TestWalker.walkTests(testObject => {\n      if (matchingFieldName(VestTest.getData(testObject), fieldName)) {\n        VestTest.reset(testObject);\n      }\n    }, TestWalker.defaultRoot());\n  }\n\n  static removeTestByFieldName(\n    fieldName: TFieldName,\n    root: MaybeRoot = TestWalker.defaultRoot(),\n  ): void {\n    TestWalker.pluckTests(testObject => {\n      return matchingFieldName(VestTest.getData(testObject), fieldName);\n    }, root);\n  }\n}\n","import { Predicate, Predicates, isEmpty, isNullish } from 'vest-utils';\nimport { TIsolate, VestRuntime, Walker } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { PreAggCache, usePreAggCache } from 'Runtime';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { VestIsolate } from 'VestIsolate';\nimport { VestTest } from 'VestTest';\nimport { matchesOrHasNoFieldName } from 'matchingFieldName';\n\nexport class SuiteWalker {\n  static defaultRoot = VestRuntime.useAvailableRoot;\n\n  static useHasPending(predicate?: Predicate): boolean {\n    const root = SuiteWalker.defaultRoot();\n\n    if (!root) {\n      return false;\n    }\n\n    const allPending = SuiteWalker.usePreAggs().pending;\n\n    if (isEmpty(allPending)) {\n      return false;\n    }\n\n    return allPending.some(Predicates.all(predicate ?? true));\n  }\n\n  static usePreAggs() {\n    return usePreAggCache(buildPreAggCache);\n  }\n\n  // Checks whether there are pending isolates in the tree.\n  // If a fieldname is provided, will only check tests with a matching fieldname.\n  static useHasRemainingWithTestNameMatching(fieldName?: TFieldName): boolean {\n    return SuiteWalker.useHasPending(\n      Predicates.any(\n        isNullish(fieldName),\n        Predicates.all(VestTest.is, (testObject: TIsolateTest) => {\n          return matchesOrHasNoFieldName(\n            VestTest.getData(testObject),\n            fieldName,\n          );\n        }),\n      ),\n    );\n  }\n}\n\nfunction buildPreAggCache(): PreAggCache {\n  const root = SuiteWalker.defaultRoot();\n\n  const base: PreAggCache = {\n    pending: [],\n    failures: {\n      errors: {},\n      warnings: {},\n    },\n  };\n\n  if (!root) {\n    return base;\n  }\n\n  return Walker.reduce(\n    root,\n    // eslint-disable-next-line complexity, max-statements\n    (agg, isolate: TIsolate) => {\n      if (VestIsolate.isPending(isolate)) {\n        agg.pending.push(isolate);\n      }\n\n      if (VestTest.is(isolate)) {\n        const fieldName = VestTest.getData(isolate).fieldName;\n\n        if (VestTest.isWarning(isolate)) {\n          agg.failures.warnings[fieldName] =\n            agg.failures.warnings[fieldName] ?? [];\n          agg.failures.warnings[fieldName].push(isolate);\n        }\n\n        if (VestTest.isFailing(isolate)) {\n          agg.failures.errors[fieldName] = agg.failures.errors[fieldName] ?? [];\n          agg.failures.errors[fieldName].push(isolate);\n        }\n      }\n\n      return agg;\n    },\n    base,\n  );\n}\n","import { Maybe, bindNot } from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TGroupName } from 'SuiteResultTypes';\nimport { VestTest } from 'VestTest';\n\nexport const nonMatchingGroupName = bindNot(matchingGroupName);\n\nexport function matchingGroupName(\n  testObject: TIsolateTest,\n  groupName: Maybe<TGroupName>,\n): boolean {\n  return VestTest.getData(testObject).groupName === groupName;\n}\n","import { isEmpty } from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { Severity } from 'Severity';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\nimport { nonMatchingFieldName } from 'matchingFieldName';\nimport { nonMatchingGroupName } from 'matchingGroupName';\nimport { nonMatchingSeverityProfile } from 'nonMatchingSeverityProfile';\n\n/**\n * The difference between this file and hasFailures is that hasFailures uses the static\n * summary object, while this one uses the actual validation state\n */\n\nexport function hasErrorsByTestObjects(fieldName?: TFieldName): boolean {\n  return hasFailuresByTestObjects(Severity.ERRORS, fieldName);\n}\n\nfunction hasFailuresByTestObjects(\n  severityKey: Severity,\n  fieldName?: TFieldName,\n): boolean {\n  const allFailures = SuiteWalker.usePreAggs().failures;\n\n  if (isEmpty(allFailures[severityKey])) {\n    return false;\n  }\n\n  if (fieldName) {\n    return !isEmpty(allFailures[severityKey][fieldName]);\n  }\n\n  return true;\n}\n\nexport function hasGroupFailuresByTestObjects(\n  severityKey: Severity,\n  groupName: TGroupName,\n  fieldName?: TFieldName,\n): boolean {\n  return TestWalker.someTests(testObject => {\n    if (nonMatchingGroupName(testObject, groupName)) {\n      return false;\n    }\n\n    return hasFailuresByTestObject(testObject, severityKey, fieldName);\n  });\n}\n\n/**\n * Determines whether a certain test profile has failures.\n */\nexport function hasFailuresByTestObject(\n  testObject: TIsolateTest,\n  severityKey: Severity,\n  fieldName?: TFieldName,\n): boolean {\n  if (!VestTest.hasFailures(testObject)) {\n    return false;\n  }\n\n  if (nonMatchingFieldName(VestTest.getData(testObject), fieldName)) {\n    return false;\n  }\n\n  if (nonMatchingSeverityProfile(severityKey, testObject)) {\n    return false;\n  }\n\n  return true;\n}\n","import { either } from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { Severity } from 'Severity';\nimport { VestTest } from 'VestTest';\n\n/**\n * Checks that a given test object matches the currently specified severity level\n */\nexport function nonMatchingSeverityProfile(\n  severity: Severity,\n  testObject: TIsolateTest,\n): boolean {\n  return either(severity === Severity.WARNINGS, VestTest.warns(testObject));\n}\n","import { useIsOptionalFieldApplied } from 'optional';\nimport { Predicates } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport { SuiteOptionalFields, TIsolateSuite } from 'IsolateSuite';\nimport { TIsolateTest } from 'IsolateTest';\nimport { OptionalFieldTypes } from 'OptionalTypes';\nimport { Severity } from 'Severity';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\nimport {\n  hasErrorsByTestObjects,\n  hasGroupFailuresByTestObjects,\n} from 'hasFailuresByTestObjects';\nimport { nonMatchingFieldName } from 'matchingFieldName';\nimport { nonMatchingGroupName } from 'matchingGroupName';\n\nexport function useShouldAddValidProperty(fieldName?: TFieldName): boolean {\n  // Is the field optional, and the optional condition is applied\n  if (useIsOptionalFieldApplied(fieldName)) {\n    return true;\n  }\n\n  // Are there no tests?\n  if (TestWalker.hasNoTests()) {\n    return false;\n  }\n\n  // // Does the field have any tests with errors?\n  if (hasErrorsByTestObjects(fieldName)) {\n    return false;\n  }\n\n  // Does the given field have any pending tests that are not optional?\n  if (useHasNonOptionalIncomplete(fieldName)) {\n    return false;\n  }\n\n  // Does the field have no missing tests?\n  return useNoMissingTests(fieldName);\n}\n\nexport function useShouldAddValidPropertyInGroup(\n  groupName: TGroupName,\n  fieldName: TFieldName,\n): boolean {\n  if (useIsOptionalFieldApplied(fieldName)) {\n    return true;\n  }\n\n  if (hasGroupFailuresByTestObjects(Severity.ERRORS, groupName, fieldName)) {\n    return false;\n  }\n\n  // Do the given group/field have any pending tests that are not optional?\n  if (useHasNonOptionalIncompleteByGroup(groupName, fieldName)) {\n    return false;\n  }\n\n  return useNoMissingTestsByGroup(groupName, fieldName);\n}\n\n// Does the given field have any pending tests that are not optional?\nfunction useHasNonOptionalIncomplete(fieldName?: TFieldName) {\n  return SuiteWalker.useHasPending(\n    Predicates.all(\n      VestTest.is,\n      (testObject: TIsolateTest) =>\n        !nonMatchingFieldName(VestTest.getData(testObject), fieldName),\n      () => !useIsOptionalFieldApplied(fieldName),\n    ),\n  );\n}\n\n// Do the given group/field have any pending tests that are not optional?\nfunction useHasNonOptionalIncompleteByGroup(\n  groupName: TGroupName,\n  fieldName: TFieldName,\n): boolean {\n  return SuiteWalker.useHasPending(\n    Predicates.all(\n      VestTest.is,\n      (testObject: TIsolateTest) =>\n        !nonMatchingGroupName(testObject, groupName),\n      (testObject: TIsolateTest) =>\n        !nonMatchingFieldName(VestTest.getData(testObject), fieldName),\n      () => !useIsOptionalFieldApplied(fieldName),\n    ),\n  );\n}\n\n// Did all of the tests for the provided field run/omit?\n// This makes sure that the fields are not skipped or pending.\nfunction useNoMissingTests(fieldName?: string): boolean {\n  return TestWalker.everyTest(testObject => {\n    return useNoMissingTestsLogic(testObject, fieldName);\n  });\n}\n\n// Does the group have no missing tests?\nfunction useNoMissingTestsByGroup(\n  groupName: TGroupName,\n  fieldName?: TFieldName,\n): boolean {\n  return TestWalker.everyTest(testObject => {\n    if (nonMatchingGroupName(testObject, groupName)) {\n      return true;\n    }\n\n    return useNoMissingTestsLogic(testObject, fieldName);\n  });\n}\n\nfunction useNoMissingTestsLogic(\n  testObject: TIsolateTest,\n  fieldName?: TFieldName,\n): boolean {\n  if (nonMatchingFieldName(VestTest.getData(testObject), fieldName)) {\n    return true;\n  }\n\n  /**\n   * The reason we're checking for the optional field here and not in \"omitOptionalFields\"\n   * is because that unlike the bool/function check we do there, here it only depends on\n   * whether the field was tested already or not.\n   *\n   * We qualify the test as not missing only if it was already run, if it is omitted,\n   * or if it is marked as optional, even if the optional check did not apply yet -\n   * but the test did not reach its final state.\n   */\n\n  return (\n    VestTest.isOmitted(testObject) ||\n    VestTest.isTested(testObject) ||\n    useOptionalTestAwaitsResolution(testObject)\n  );\n}\n\nfunction useOptionalTestAwaitsResolution(testObject: TIsolateTest): boolean {\n  // Does the test belong to an optional field,\n  // and the test itself is still in an indeterminate state?\n\n  const root = VestRuntime.useAvailableRoot<TIsolateSuite>();\n\n  const { fieldName } = VestTest.getData(testObject);\n\n  return (\n    SuiteOptionalFields.getOptionalField(root, fieldName).type ===\n      OptionalFieldTypes.AUTO && VestTest.awaitsResolution(testObject)\n  );\n}\n","import { Maybe, assign, defaultTo } from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { countKeyBySeverity, Severity } from 'Severity';\nimport {\n  Groups,\n  SingleTestSummary,\n  SuiteSummary,\n  SummaryBase,\n  TFieldName,\n  TGroupName,\n  Tests,\n} from 'SuiteResultTypes';\nimport { SummaryFailure } from 'SummaryFailure';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\nimport {\n  useShouldAddValidProperty,\n  useShouldAddValidPropertyInGroup,\n} from 'shouldAddValidProperty';\n\nexport function useProduceSuiteSummary<\n  F extends TFieldName,\n  G extends TGroupName,\n>(): SuiteSummary<F, G> {\n  // @vx-allow use-use (TODO: fix this. the error is in the lint rule)\n  const summary = TestWalker.reduceTests<\n    SuiteSummary<F, G>,\n    TIsolateTest<F, G>\n  >((summary, testObject) => {\n    const fieldName = VestTest.getData<F>(testObject).fieldName;\n    summary.tests[fieldName] = useAppendToTest(summary.tests, testObject);\n    summary.groups = useAppendToGroup(summary.groups, testObject);\n\n    if (VestTest.isOmitted(testObject)) {\n      return summary;\n    }\n    if (summary.tests[fieldName].valid === false) {\n      summary.valid = false;\n    }\n    return addSummaryStats(testObject, summary);\n  }, new SuiteSummary());\n\n  summary.valid = summary.valid === false ? false : useShouldAddValidProperty();\n\n  return summary;\n}\n\nfunction addSummaryStats<F extends TFieldName, G extends TGroupName>(\n  testObject: TIsolateTest<F, G>,\n  summary: SuiteSummary<F, G>,\n): SuiteSummary<F, G> {\n  if (VestTest.isWarning(testObject)) {\n    summary.warnCount++;\n    summary.warnings.push(SummaryFailure.fromTestObject(testObject));\n  } else if (VestTest.isFailing(testObject)) {\n    summary.errorCount++;\n    summary.errors.push(SummaryFailure.fromTestObject(testObject));\n  }\n\n  if (VestTest.isPending(testObject)) {\n    summary.pendingCount++;\n  }\n\n  if (shouldCountTestRun(testObject)) {\n    summary.testCount++;\n  }\n\n  return summary;\n}\n\nfunction useAppendToTest<F extends TFieldName>(\n  tests: Tests<F>,\n  testObject: TIsolateTest<F>,\n): SingleTestSummary {\n  const fieldName = VestTest.getData<F>(testObject).fieldName;\n\n  const test = appendTestObject(tests[fieldName], testObject);\n  // If `valid` is false to begin with, keep it that way. Otherwise, assess.\n  test.valid =\n    test.valid === false ? false : useShouldAddValidProperty(fieldName);\n\n  return test;\n}\n\n/**\n * Appends to a group object if within a group\n */\nfunction useAppendToGroup(\n  groups: Groups<TGroupName, TFieldName>,\n  testObject: TIsolateTest,\n): Groups<TGroupName, TFieldName> {\n  const { groupName, fieldName } = VestTest.getData(testObject);\n\n  if (!groupName) {\n    return groups;\n  }\n\n  groups[groupName] = groups[groupName] || {};\n  const group = groups[groupName];\n  group[fieldName] = appendTestObject(group[fieldName], testObject);\n\n  group[fieldName].valid =\n    group[fieldName].valid === false\n      ? false\n      : useShouldAddValidPropertyInGroup(groupName, fieldName);\n\n  return groups;\n}\n\n/**\n * Appends the test to a results object.\n */\n// eslint-disable-next-line max-statements, complexity\nfunction appendTestObject(\n  summaryKey: Maybe<SingleTestSummary>,\n  testObject: TIsolateTest,\n): SingleTestSummary {\n  const { message } = VestTest.getData(testObject);\n\n  // Let's first create a new object, so we don't mutate the original.\n  const nextSummaryKey = defaultTo<SingleTestSummary>(\n    summaryKey ? { ...summaryKey } : null,\n    baseTestStats,\n  );\n\n  // If the test is not actionable, we don't need to append it to the summary.\n  if (VestTest.isNonActionable(testObject)) return nextSummaryKey;\n\n  // Increment the pending count if the test is pending.\n  if (VestTest.isPending(testObject)) {\n    nextSummaryKey.pendingCount++;\n  }\n\n  // Increment the error count if the test is failing.\n  if (VestTest.isFailing(testObject)) {\n    incrementFailures(Severity.ERRORS);\n  } else if (VestTest.isWarning(testObject)) {\n    // Increment the warning count if the test is warning.\n    incrementFailures(Severity.WARNINGS);\n  }\n\n  // Increment the test count.\n  if (shouldCountTestRun(testObject)) {\n    nextSummaryKey.testCount++;\n  }\n\n  return nextSummaryKey;\n\n  // Helper function to increment the failure count.\n  function incrementFailures(severity: Severity) {\n    const countKey = countKeyBySeverity(severity);\n    nextSummaryKey[countKey]++;\n    if (message) {\n      nextSummaryKey[severity] = (nextSummaryKey[severity] || []).concat(\n        message,\n      );\n    }\n  }\n}\n\nfunction baseTestStats() {\n  return assign(new SummaryBase(), {\n    errors: [],\n    valid: true,\n    warnings: [],\n  });\n}\n\nfunction shouldCountTestRun<F extends TFieldName, G extends TGroupName>(\n  testObject: TIsolateTest<F, G>,\n): boolean {\n  return VestTest.isTested(testObject) || VestTest.isPending(testObject);\n}\n","import { assign, Maybe } from 'vest-utils';\n\nimport { useSuiteName, useSuiteResultCache } from 'Runtime';\nimport {\n  SuiteResult,\n  SuiteSummary,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\nimport { suiteSelectors } from 'suiteSelectors';\nimport { useProduceSuiteSummary } from 'useProduceSuiteSummary';\n\nexport function useCreateSuiteResult<\n  F extends TFieldName,\n  G extends TGroupName,\n>(): SuiteResult<F, G> {\n  return useSuiteResultCache<F, G>(() => {\n    // @vx-allow use-use\n    const summary = useProduceSuiteSummary<F, G>();\n\n    // @vx-allow use-use\n    const suiteName = useSuiteName();\n\n    return Object.freeze(constructSuiteResultObject<F, G>(summary, suiteName));\n  });\n}\n\nexport function constructSuiteResultObject<\n  F extends TFieldName,\n  G extends TGroupName,\n>(summary: SuiteSummary<F, G>, suiteName?: Maybe<string>): SuiteResult<F, G> {\n  return assign(summary, suiteSelectors<F, G>(summary), {\n    suiteName,\n  }) as SuiteResult<F, G>;\n}\n","import {\n  SuiteResult,\n  SuiteSummary,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\nimport { constructSuiteResultObject, useCreateSuiteResult } from 'suiteResult';\n\n// @vx-allow use-use\nexport function LazyDraft<\n  F extends TFieldName,\n  G extends TGroupName,\n>(): SuiteResult<F, G> {\n  const emptySummary = constructSuiteResultObject(new SuiteSummary<F, G>());\n\n  return new Proxy(emptySummary, {\n    get: (_, prop) => {\n      // @vx-allow use-use\n      const result = useCreateSuiteResult<F, G>();\n\n      return result[prop as keyof SuiteResult<F, G>];\n    },\n  }) as SuiteResult<F, G>;\n}\n","import { CB, optionalFunctionValue } from 'vest-utils';\nimport { Isolate } from 'vestjs-runtime';\n\nimport { LazyDraft } from 'LazyDraft';\nimport { SuiteContext, useSkipped } from 'SuiteContext';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\nimport { TDraftCondition } from 'getTypedMethods';\n\n/**\n * Conditionally skips running tests within the callback.\n *\n * @example\n *\n * skipWhen(res => res.hasErrors('username'), () => {\n *  test('username', 'User already taken', async () => await doesUserExist(username)\n * });\n */\n// @vx-allow use-use\nexport function skipWhen<F extends TFieldName, G extends TGroupName>(\n  condition: TDraftCondition<F, G>,\n  callback: CB,\n): void {\n  Isolate.create(VestIsolateType.SkipWhen, () => {\n    SuiteContext.run(\n      {\n        skipped:\n          // Checking for nested conditional. If we're in a nested skipWhen,\n          // we should skip the test if the parent conditional is true.\n          useIsExcludedIndividually() ||\n          // Otherwise, we should skip the test if the conditional is true.\n          optionalFunctionValue(condition, LazyDraft<F, G>()),\n      },\n      callback,\n    );\n  });\n}\n\nexport function useIsExcludedIndividually(): boolean {\n  return useSkipped();\n}\n","import { isNotNullish } from 'vest-utils';\nimport { TIsolate, Walker } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { FocusSelectors } from 'focused';\n\n/**\n * Checks if context has included tests\n */\nexport function useHasOnliedTests(\n  testObject: TIsolateTest,\n  fieldName?: TFieldName,\n): boolean {\n  return isNotNullish(\n    Walker.findClosest(testObject, (child: TIsolate) => {\n      if (!FocusSelectors.isIsolateFocused(child)) return false;\n\n      return FocusSelectors.isOnlyFocused(child, fieldName);\n    }),\n  );\n}\n","import { Nullable, optionalFunctionValue } from 'vest-utils';\nimport { TIsolate, Walker } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { useInclusion } from 'SuiteContext';\nimport { VestTest } from 'VestTest';\nimport { FocusSelectors, TIsolateFocused } from 'focused';\nimport { useIsExcludedIndividually } from 'skipWhen';\nimport { useHasOnliedTests } from 'useHasOnliedTests';\n//Checks whether a certain test profile excluded by any of the exclusion groups.\n\nfunction useClosestMatchingFocus(\n  testObject: TIsolateTest,\n): Nullable<TIsolateFocused> {\n  return Walker.findClosest(testObject, (child: TIsolate) => {\n    if (!FocusSelectors.isIsolateFocused(child)) return false;\n\n    const { fieldName } = VestTest.getData(testObject);\n\n    return child.data.match?.includes(fieldName) || child.data.matchAll;\n  });\n}\n\nexport function useIsExcluded(testObject: TIsolateTest): boolean {\n  const { fieldName } = VestTest.getData(testObject);\n\n  if (useIsExcludedIndividually()) return true;\n  const inclusion = useInclusion();\n  const focusMatch = useClosestMatchingFocus(testObject);\n  // if test is skipped\n  // no need to proceed\n  if (FocusSelectors.isSkipFocused(focusMatch)) return true;\n  const isTestIncluded = FocusSelectors.isOnlyFocused(focusMatch);\n  // if field is only'ed\n  if (isTestIncluded) return false;\n\n  // If there is _ANY_ `only`ed test (and we already know this one isn't) return true\n  if (useHasOnliedTests(testObject)) {\n    // Check if inclusion rules for this field (`include` hook)\n    return !optionalFunctionValue(inclusion[fieldName], testObject);\n  }\n\n  // We're done here. This field is not excluded\n  return false;\n}\n","import { Modes } from 'Modes';\nimport { useMode } from 'SuiteContext';\nimport { WithFieldName } from 'TestTypes';\nimport { hasErrorsByTestObjects } from 'hasFailuresByTestObjects';\n\n/**\n * Sets the current execution mode for the current suite.\n *\n * Supported modes:\n * - `EAGER` - (default) Runs all tests, but stops on first failure for each given field.\n * - `ALL` - Runs all tests, regardless of failures.\n * - `ONE` - Stops suite execution on first failure of any field.\n *\n * @example\n * ```js\n * import {Modes, create} from 'vest';\n *\n * const suite = create('suite_name', () => {\n *  vest.mode(Modes.ALL);\n *\n *  // ...\n * });\n * ```\n * @param 'ALL' | 'EAGER' | 'ONE' mode - The mode to set.\n */\n\n// @vx-allow use-use\nexport function mode(mode: Modes): void {\n  const [, setMode] = useMode();\n\n  setMode(mode);\n}\n\nfunction useIsMode(mode: Modes): boolean {\n  const [currentMode] = useMode();\n\n  return currentMode === mode;\n}\n\nfunction useIsEager(): boolean {\n  return useIsMode(Modes.EAGER);\n}\n\nfunction useIsOne(): boolean {\n  return useIsMode(Modes.ONE);\n}\n\nexport function useShouldSkipBasedOnMode(testData: WithFieldName): boolean {\n  if (useIsOne()) {\n    return hasErrorsByTestObjects();\n  }\n\n  if (useIsEager()) {\n    return hasErrorsByTestObjects(testData.fieldName);\n  }\n\n  return false;\n}\n","import type { CB } from 'vest-utils';\nimport { optionalFunctionValue } from 'vest-utils';\nimport { Isolate } from 'vestjs-runtime';\n\nimport { LazyDraft } from 'LazyDraft';\nimport { SuiteContext, useOmitted } from 'SuiteContext';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\nimport { TDraftCondition } from 'getTypedMethods';\n\n/**\n * Conditionally omits tests from the suite.\n *\n * @example\n *\n * omitWhen(res => res.hasErrors('username'), () => {\n *  test('username', 'User already taken', async () => await doesUserExist(username)\n * });\n */\n// @vx-allow use-use\nexport function omitWhen<F extends TFieldName, G extends TGroupName>(\n  conditional: TDraftCondition<F, G>,\n  callback: CB,\n): void {\n  Isolate.create(VestIsolateType.OmitWhen, () => {\n    SuiteContext.run(\n      {\n        omitted:\n          useWithinActiveOmitWhen() ||\n          optionalFunctionValue(conditional, LazyDraft<F, G>()),\n      },\n      callback,\n    );\n  });\n}\n\n// Checks that we're currently in an active omitWhen block\nexport function useWithinActiveOmitWhen(): boolean {\n  return useOmitted();\n}\n","import { useIsOptionalFieldApplied } from 'optional';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { VestTest } from 'VestTest';\nimport { useShouldSkipBasedOnMode } from 'mode';\nimport { useWithinActiveOmitWhen } from 'omitWhen';\nimport { useIsExcludedIndividually } from 'skipWhen';\nimport { useIsExcluded } from 'useIsExcluded';\n\n// eslint-disable-next-line complexity\nexport function useVerifyTestRun(\n  testObject: TIsolateTest,\n  collisionResult: TIsolateTest = testObject,\n): TIsolateTest {\n  const testData = VestTest.getData(testObject);\n\n  if (useShouldSkipBasedOnMode(testData)) {\n    return skipTestAndReturn(testObject);\n  }\n\n  if (useShouldOmit(testData.fieldName)) {\n    return omitTestAndReturn(testObject);\n  }\n\n  if (useIsExcluded(testObject)) {\n    return useForceSkipIfInSkipWhen(collisionResult);\n  }\n\n  return testObject;\n}\n\nfunction useShouldOmit(fieldName: TFieldName): boolean {\n  return useWithinActiveOmitWhen() || useIsOptionalFieldApplied(fieldName);\n}\n\nfunction skipTestAndReturn(testNode: TIsolateTest): TIsolateTest {\n  VestTest.skip(testNode);\n  return testNode;\n}\n\nfunction omitTestAndReturn(testNode: TIsolateTest): TIsolateTest {\n  VestTest.omit(testNode);\n  return testNode;\n}\n\nfunction useForceSkipIfInSkipWhen(testNode: TIsolateTest): TIsolateTest {\n  // We're forcing skipping the pending test\n  // if we're directly within a skipWhen block\n  // This mostly means that we're probably giving\n  // up on this async test intentionally.\n  VestTest.skip(testNode, useIsExcludedIndividually());\n  return testNode;\n}\n","import { Maybe, deferThrow, text } from 'vest-utils';\nimport { IsolateInspector, Reconciler } from 'vestjs-runtime';\nimport type { TIsolate } from 'vestjs-runtime';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport type { TIsolateTest } from 'IsolateTest';\nimport { VestTest } from 'VestTest';\nimport cancelOverriddenPendingTest from 'cancelOverriddenPendingTest';\nimport { isSameProfileTest } from 'isSameProfileTest';\nimport { useIsExcluded } from 'useIsExcluded';\nimport { useVerifyTestRun } from 'verifyTestRun';\n\nexport class IsolateTestReconciler {\n  static match(currentNode: TIsolate, historyNode: TIsolate): boolean {\n    return VestTest.is(currentNode) && VestTest.is(historyNode);\n  }\n\n  static reconcile(\n    currentNode: TIsolateTest,\n    historyNode: TIsolateTest,\n  ): TIsolateTest {\n    const reconcilerOutput = usePickNode(currentNode, historyNode);\n\n    const nextNode = useVerifyTestRun(currentNode, reconcilerOutput);\n\n    cancelOverriddenPendingTestOnTestReRun(nextNode, currentNode, historyNode);\n\n    return nextNode;\n  }\n}\n\nfunction usePickNode(\n  newNode: TIsolateTest,\n  prevNode: TIsolateTest,\n): TIsolateTest {\n  if (IsolateInspector.usesKey(newNode)) {\n    return useHandleTestWithKey(newNode);\n  }\n\n  if (\n    Reconciler.dropNextNodesOnReorder(nodeReorderDetected, newNode, prevNode)\n  ) {\n    throwTestOrderError(newNode, prevNode);\n    return newNode;\n  }\n\n  if (!VestTest.is(prevNode)) {\n    // I believe we cannot actually reach this point.\n    // Because it should already be handled by nodeReorderDetected.\n    /* istanbul ignore next */\n    return newNode;\n  }\n\n  // FIXME: May-13-2023\n  // This may not be the most ideal solution.\n  // In short: if the node was omitted in the previous run,\n  // we want to re-evaluate it. The reason is that we may incorrectly\n  // identify it is \"optional\" because it was omitted in the previous run.\n  // There may be a better way to handle this. Need to revisit this.\n  if (VestTest.isOmitted(prevNode)) {\n    return newNode;\n  }\n\n  return prevNode;\n}\n\nfunction useHandleTestWithKey(newNode: TIsolateTest): TIsolateTest {\n  return VestTest.cast(\n    Reconciler.handleIsolateNodeWithKey(newNode, (prevNode: TIsolateTest) => {\n      // This is the revoke callback. it determines whether we should revoke the previous node and use the new one.\n      if (VestTest.isNonActionable(prevNode)) {\n        return true;\n      }\n\n      if (useIsExcluded(newNode)) {\n        return false;\n      }\n\n      return true;\n    }),\n  );\n}\n\nfunction cancelOverriddenPendingTestOnTestReRun(\n  nextNode: TIsolate,\n  currentNode: TIsolate,\n  prevTestObject: TIsolateTest,\n) {\n  if (nextNode === currentNode && VestTest.is(currentNode)) {\n    cancelOverriddenPendingTest(prevTestObject, currentNode);\n  }\n}\n\nfunction nodeReorderDetected(\n  newNode: TIsolateTest,\n  prevNode: Maybe<TIsolate>,\n): boolean {\n  return VestTest.is(prevNode) && !isSameProfileTest(prevNode, newNode);\n}\n\nfunction throwTestOrderError(\n  newNode: TIsolateTest,\n  prevNode: Maybe<TIsolate>,\n): void {\n  if (IsolateInspector.canReorder(newNode)) {\n    return;\n  }\n\n  deferThrow(\n    text(ErrorStrings.TESTS_CALLED_IN_DIFFERENT_ORDER, {\n      fieldName: VestTest.getData(newNode).fieldName,\n      prevName: VestTest.is(prevNode)\n        ? VestTest.getData(prevNode).fieldName\n        : undefined,\n    }),\n  );\n}\n","import { Nullable } from 'vest-utils';\nimport { TIsolate } from 'vestjs-runtime';\n\nimport { IsolateTestReconciler } from 'IsolateTestReconciler';\n\nconst reconcilers: IsolateReconciler[] = [IsolateTestReconciler];\n\nexport function registerReconciler(reconciler: IsolateReconciler) {\n  if (reconcilers.includes(reconciler)) {\n    return;\n  }\n\n  reconcilers.push(reconciler);\n}\n\nexport function VestReconciler(\n  currentNode: TIsolate,\n  historyNode: TIsolate,\n): Nullable<TIsolate> {\n  return (\n    reconcilers\n      .find(reconciler => reconciler.match(currentNode, historyNode))\n      ?.reconcile(currentNode as any, historyNode as any) ?? null\n  );\n}\n\nexport type IsolateReconciler = {\n  match(currentNode: TIsolate, historyNode: TIsolate): boolean;\n  reconcile(elecurrentNode: TIsolate, historyNode: TIsolate): TIsolate;\n};\n","import { TIsolateTest } from 'IsolateTest';\nimport { VestTest } from 'VestTest';\nimport { isSameProfileTest } from 'isSameProfileTest';\n\nexport default function cancelOverriddenPendingTest(\n  prevRunTestObject: TIsolateTest,\n  currentRunTestObject: TIsolateTest,\n): void {\n  if (\n    currentRunTestObject !== prevRunTestObject &&\n    isSameProfileTest(prevRunTestObject, currentRunTestObject) &&\n    VestTest.isPending(prevRunTestObject)\n  ) {\n    VestTest.cancel(prevRunTestObject);\n  }\n}\n","import { CB } from 'vest-utils';\nimport { TIsolate, Isolate } from 'vestjs-runtime';\n\nimport { SuiteContext } from 'SuiteContext';\nimport { TGroupName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport function group<G extends TGroupName>(\n  groupName: G,\n  callback: CB<void>,\n): TIsolate;\nexport function group(callback: CB<void>): TIsolate;\nexport function group<G extends TGroupName>(\n  ...args: [groupName: G, callback: CB<void>] | [callback: CB<void>]\n): TIsolate {\n  const [callback, groupName] = args.reverse() as [CB<void>, G];\n\n  return Isolate.create(VestIsolateType.Group, () => {\n    return SuiteContext.run({ ...(groupName && { groupName }) }, callback);\n  });\n}\n","import { isStringValue, invariant, optionalFunctionValue } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { TIsolateTest } from 'IsolateTest';\nimport { useInclusion } from 'SuiteContext';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { TDraftCondition } from 'getTypedMethods';\nimport { useCreateSuiteResult } from 'suiteResult';\nimport { useHasOnliedTests } from 'useHasOnliedTests';\n\n/**\n * Conditionally includes a field for testing, based on specified criteria.\n *\n * @param {string} fieldName - The name of the field to include for testing.\n *\n * @example\n * include('confirm').when('password');\n * // Includes the \"confirm\" field for testing when the \"password\" field is included\n *\n * include('confirm').when(someValue);\n * // Includes the \"confirm\" field for testing when the value of `someValue` is true\n *\n * include('confirm').when(() => someValue);\n * // Includes the \"confirm\" field for testing when the callback function returns true\n *\n * include('username').when(result => result.hasErrors('username'));\n * // Includes the \"username\" field for testing when there are errors associated with it in the current suite result\n */\n// @vx-allow use-use\nexport function include<F extends TFieldName, G extends TGroupName>(\n  fieldName: F,\n): {\n  when: (condition: F | TFieldName | TDraftCondition<F, G>) => void;\n} {\n  invariant(isStringValue(fieldName));\n  const inclusion = useInclusion();\n\n  inclusion[fieldName] = true;\n\n  return { when };\n\n  /**\n   * Specifies the inclusion criteria for the field in `include` function.\n   */\n  function when(condition: F | TFieldName | TDraftCondition<F, G>): void {\n    invariant(condition !== fieldName, ErrorStrings.INCLUDE_SELF);\n\n    const inclusion = useInclusion();\n\n    // This callback will run as part of the \"isExcluded\" series of checks\n    inclusion[fieldName] = function isIncluded(\n      currentNode: TIsolateTest,\n    ): boolean {\n      if (isStringValue(condition)) {\n        return useHasOnliedTests(currentNode, condition);\n      }\n\n      return optionalFunctionValue(\n        condition,\n        optionalFunctionValue(useCreateSuiteResult),\n      );\n    };\n  }\n}\n","import { CB, Maybe } from 'vest-utils';\nimport { TIsolate, Isolate, IsolateKey } from 'vestjs-runtime';\n\nimport { IsolateTestStateMachine, TestStatus } from 'IsolateTestStateMachine';\nimport { TestSeverity } from 'Severity';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { AsyncTest, TestFn } from 'TestTypes';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport type TIsolateTest<\n  F extends TFieldName = TFieldName,\n  G extends TGroupName = TGroupName,\n> = TIsolate<CommonTestFields<F, G> & IsolateTestPayload>;\n\nexport function IsolateTest<\n  F extends TFieldName = TFieldName,\n  G extends TGroupName = TGroupName,\n>(\n  callback: CB,\n  input: CommonTestFields<F, G>,\n  key?: IsolateKey,\n): TIsolateTest<F, G> {\n  const payload: IsolateTestPayload = {\n    ...IsolateTestBase(),\n    fieldName: input.fieldName,\n    testFn: input.testFn,\n  };\n\n  if (input.groupName) {\n    payload.groupName = input.groupName;\n  }\n\n  if (input.message) {\n    payload.message = input.message;\n  }\n  const isolate = Isolate.create<IsolateTestPayload>(\n    VestIsolateType.Test,\n    callback,\n    payload,\n    key ?? null,\n  );\n\n  return isolate as TIsolateTest<F, G>;\n}\n\nexport function IsolateTestBase() {\n  return {\n    severity: TestSeverity.Error,\n    status: IsolateTestStateMachine.initial(),\n  };\n}\n\nexport type IsolateTestPayload<\n  F extends TFieldName = TFieldName,\n  G extends TGroupName = TGroupName,\n> = CommonTestFields<F, G> & {\n  severity: TestSeverity;\n  status: TestStatus;\n  asyncTest?: AsyncTest;\n};\n\ntype CommonTestFields<\n  F extends TFieldName = TFieldName,\n  G extends TGroupName = TGroupName,\n> = {\n  message?: Maybe<string>;\n  groupName?: G;\n  fieldName: F;\n  testFn: TestFn;\n};\n","import { isPromise, isStringValue, text, deferThrow } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { TIsolateTest } from 'IsolateTest';\nimport { SuiteContext } from 'SuiteContext';\nimport { TestResult } from 'TestTypes';\nimport { VestTest } from 'VestTest';\nimport { shouldUseErrorAsMessage } from 'shouldUseErrorMessage';\nimport { useVerifyTestRun } from 'verifyTestRun';\n\n// eslint-disable-next-line max-statements\nexport function useAttemptRunTest(testObject: TIsolateTest) {\n  useVerifyTestRun(testObject);\n\n  if (VestTest.isUntested(testObject)) {\n    return useRunTest(testObject);\n  }\n\n  if (!VestTest.isNonActionable(testObject)) {\n    // Probably unreachable. If we get here, it means that\n    // something was really wrong and should be reported.\n    /* istanbul ignore next */\n    deferThrow(\n      text(ErrorStrings.UNEXPECTED_TEST_REGISTRATION_ERROR, {\n        testObject: JSON.stringify(testObject),\n      }),\n    );\n  }\n}\n\nfunction runSyncTest(testObject: TIsolateTest): TestResult {\n  return SuiteContext.run({ currentTest: testObject }, () => {\n    let result: TestResult;\n\n    const { message, testFn } = VestTest.getData(testObject);\n\n    try {\n      result = testFn({ signal: testObject.abortController.signal });\n    } catch (error) {\n      if (shouldUseErrorAsMessage(message, error)) {\n        VestTest.getData(testObject).message = error;\n      }\n      result = false;\n    }\n\n    if (result === false) {\n      VestTest.fail(testObject);\n    }\n\n    return result;\n  });\n}\n\n/**\n * runs test, if async - adds to pending array\n */\nfunction useRunTest(testObject: TIsolateTest): Promise<void> | undefined {\n  // Run test callback.\n  // If a promise is returned, set as async and\n  // Move to pending list.\n  const result = runSyncTest(testObject);\n  try {\n    // try catch for safe property access\n    // in case object is an enforce chain\n    if (isPromise(result)) {\n      VestTest.getData(testObject).asyncTest = result;\n      return useRunAsyncTest(testObject);\n    }\n\n    onTestCompleted(testObject);\n  } catch (e) {\n    // Probably unreachable. If we get here, it means that\n    // something was really wrong and should be reported.\n    /* istanbul ignore next */\n    throw new Error(\n      text(ErrorStrings.UNEXPECTED_TEST_REGISTRATION_ERROR, {\n        testObject: JSON.stringify(testObject),\n        error: e,\n      }),\n    );\n  }\n}\n\n/**\n * Runs async test.\n */\nfunction useRunAsyncTest(testObject: TIsolateTest): Promise<void> | undefined {\n  const { asyncTest, message } = VestTest.getData(testObject);\n\n  if (!isPromise(asyncTest)) return;\n  // VestTest.setPending(testObject);\n\n  const done = VestRuntime.persist(() => {\n    onTestCompleted(testObject);\n  });\n  const fail = VestRuntime.persist((rejectionMessage?: string) => {\n    if (VestTest.isCanceled(testObject)) {\n      return;\n    }\n\n    VestTest.getData(testObject).message = isStringValue(rejectionMessage)\n      ? rejectionMessage\n      : message;\n    VestTest.fail(testObject);\n\n    done();\n  });\n\n  return asyncTest.then(done, fail);\n}\n\nfunction onTestCompleted(testObject: TIsolateTest) {\n  // Attempts passing if the test is not already failed.\n  // or is not canceled/omitted.\n  VestTest.pass(testObject);\n}\n","import { Maybe, isStringValue, isUndefined } from 'vest-utils';\n\nexport function shouldUseErrorAsMessage(\n  message: Maybe<string>,\n  error: unknown,\n): error is Maybe<string> {\n  // kind of cheating with this safe guard, but it does the job\n  return isUndefined(message) && isStringValue(error);\n}\n","import { assign, invariant, isFunction, isStringValue, text } from 'vest-utils';\nimport { Bus, IsolateKey } from 'vestjs-runtime';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { IsolateTest, TIsolateTest } from 'IsolateTest';\nimport { useGroupName } from 'SuiteContext';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { TestFn } from 'TestTypes';\nimport { useAttemptRunTest } from 'runTest';\nimport { wrapTestMemo } from 'test.memo';\n\nfunction vestTest<F extends TFieldName>(\n  fieldName: F,\n  message: string,\n  cb: TestFn,\n): TIsolateTest;\nfunction vestTest<F extends TFieldName>(fieldName: F, cb: TestFn): TIsolateTest;\nfunction vestTest<F extends TFieldName>(\n  fieldName: F,\n  message: string,\n  cb: TestFn,\n  key: IsolateKey,\n): TIsolateTest;\nfunction vestTest<F extends TFieldName>(\n  fieldName: F,\n  cb: TestFn,\n  key: IsolateKey,\n): TIsolateTest;\n// @vx-allow use-use\nfunction vestTest<F extends TFieldName>(\n  fieldName: F,\n  ...args:\n    | [message: string, cb: TestFn]\n    | [cb: TestFn]\n    | [message: string, cb: TestFn, key: IsolateKey]\n    | [cb: TestFn, key: IsolateKey]\n): TIsolateTest {\n  const [message, testFn, key] = (\n    isFunction(args[1]) ? args : [undefined, ...args]\n  ) as [string, TestFn, IsolateKey];\n\n  validateTestParams(fieldName, testFn);\n\n  const groupName = useGroupName();\n\n  const testObjectInput = { fieldName, groupName, message, testFn };\n\n  // This invalidates the suite cache.\n  Bus.useEmit('TEST_RUN_STARTED');\n\n  return IsolateTest(useAttemptRunTest, testObjectInput, key);\n}\n\nexport const test = assign(vestTest, {\n  memo: wrapTestMemo(vestTest),\n});\n\nexport type VTest = typeof vestTest;\n\nfunction validateTestParams(fieldName: string, testFn: TestFn): void {\n  const fnName = 'test';\n  invariant(\n    isStringValue(fieldName),\n    text(ErrorStrings.INVALID_PARAM_PASSED_TO_FUNCTION, {\n      fn_name: fnName,\n      param: 'fieldName',\n      expected: 'string',\n    }),\n  );\n  invariant(\n    isFunction(testFn),\n    text(ErrorStrings.INVALID_PARAM_PASSED_TO_FUNCTION, {\n      fn_name: fnName,\n      param: 'callback',\n      expected: 'function',\n    }),\n  );\n}\n","import { CB, isNull } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport * as Runtime from 'Runtime';\nimport { useTestMemoCache } from 'SuiteContext';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { TestFn } from 'TestTypes';\nimport { VestTest } from 'VestTest';\nimport { VTest } from 'test';\n\n// @vx-allow use-use\nexport function wrapTestMemo<FN extends TFieldName>(test: VTest): TestMemo<FN> {\n  /**\n   * Caches a test result based on the test's dependencies.\n   */\n  function memo<F extends FN>(\n    fieldName: F,\n    ...args: ParametersWithoutMessage\n  ): TIsolateTest;\n  function memo<F extends FN>(\n    fieldName: F,\n    ...args: ParametersWithMessage\n  ): TIsolateTest;\n  function memo<F extends FN>(\n    fieldName: F,\n    ...args: ParamsOverload\n  ): TIsolateTest {\n    const [deps, testFn, msg] = args.reverse() as [any[], TestFn, string];\n\n    // Implicit dependency for better specificity\n    const dependencies = [\n      Runtime.useSuiteId(),\n      fieldName,\n      VestRuntime.useCurrentCursor(),\n    ].concat(deps);\n\n    return useGetTestFromCache(dependencies, cacheAction);\n\n    function cacheAction() {\n      return test(fieldName, msg, testFn);\n    }\n  }\n\n  return memo;\n}\n\nfunction useGetTestFromCache(\n  dependencies: any[],\n  cacheAction: CB<TIsolateTest>,\n): TIsolateTest {\n  const cache = useTestMemoCache();\n\n  const cached = cache.get(dependencies);\n\n  if (isNull(cached)) {\n    // cache miss\n    return cache(dependencies, cacheAction);\n  }\n\n  const [, cachedValue] = cached;\n\n  if (VestTest.isCanceled(cachedValue)) {\n    // cache hit, but test is canceled\n    cache.invalidate(dependencies);\n    return cache(dependencies, cacheAction);\n  }\n\n  // FIXME:(@ealush 2024-08-12): This is some kind of a hack. Instead organically letting Vest set the next\n  // child of the isolate, we're forcing it from the outside.\n  // Instead, an ideal solution would probably be to have test.memo be its own isolate\n  // that just injects a historic output from a previous test run.\n  VestRuntime.useSetNextIsolateChild(cachedValue);\n\n  return cachedValue;\n}\n\nexport type TestMemo<F extends TFieldName> = {\n  (fieldName: F, ...args: ParametersWithoutMessage): TIsolateTest;\n  (fieldName: F, ...args: ParametersWithMessage): TIsolateTest;\n};\n\ntype ParametersWithoutMessage = [test: TestFn, dependencies: unknown[]];\ntype ParametersWithMessage = [\n  message: string,\n  test: TestFn,\n  dependencies: unknown[],\n];\n\ntype ParamsOverload = ParametersWithoutMessage | ParametersWithMessage;\n","// import { optional, skipWhen, omitWhen, IsolateTest, group } from 'vest';\nimport { optional } from 'optional';\nimport { CB, DynamicValue } from 'vest-utils';\nimport { TIsolate, IsolateKey } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { OptionalsInput } from 'OptionalTypes';\nimport { SuiteResult, TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { TestFn } from 'TestTypes';\nimport { FieldExclusion, only, skip } from 'focused';\nimport { group } from 'group';\nimport { include } from 'include';\nimport { omitWhen } from 'omitWhen';\nimport { skipWhen } from 'skipWhen';\nimport { test } from 'test';\nimport { TestMemo } from 'test.memo';\n\nexport function getTypedMethods<\n  F extends TFieldName,\n  G extends TGroupName,\n>(): TTypedMethods<F, G> {\n  return {\n    group,\n    include,\n    omitWhen,\n    only,\n    optional,\n    skip,\n    skipWhen,\n    test,\n  };\n}\n\nexport type TTypedMethods<F extends TFieldName, G extends TGroupName> = {\n  include: (fieldName: F) => {\n    when: (condition: F | TDraftCondition<F, G>) => void;\n  };\n  omitWhen: (conditional: TDraftCondition<F, G>, callback: CB) => void;\n  only: {\n    (item: FieldExclusion<F>): void;\n  };\n  optional: (optionals: OptionalsInput<F>) => void;\n  skip: {\n    (item: FieldExclusion<F>): void;\n  };\n  skipWhen: (condition: TDraftCondition<F, G>, callback: CB) => void;\n  test: {\n    (fieldName: F, message: string, cb: TestFn): TIsolateTest;\n    (fieldName: F, cb: TestFn): TIsolateTest;\n    (fieldName: F, message: string, cb: TestFn, key: IsolateKey): TIsolateTest;\n    (fieldName: F, cb: TestFn, key: IsolateKey): TIsolateTest;\n  } & {\n    memo: TestMemo<F>;\n  };\n  group: {\n    (callback: () => void): TIsolate;\n    (groupName: G, callback: () => void): TIsolate;\n  };\n};\n\nexport type TDraftCondition<\n  F extends TFieldName,\n  G extends TGroupName,\n> = DynamicValue<boolean, [draft: SuiteResult<F, G>]>;\n","import { isEmpty, optionalFunctionValue } from 'vest-utils';\nimport { Bus, VestRuntime } from 'vestjs-runtime';\n\nimport { SuiteOptionalFields, TIsolateSuite } from 'IsolateSuite';\nimport { TIsolateTest } from 'IsolateTest';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\n\n/**\n * This module gets triggered once the suite is done running its sync tests.\n *\n * It goes over all the tests in the state, and checks if they need to be omitted.\n */\n\nexport function useOmitOptionalFields(): void {\n  const root = VestRuntime.useAvailableRoot<TIsolateSuite>();\n\n  const optionalFields = SuiteOptionalFields.getOptionalFields(root);\n\n  // If there are no optional fields, we don't need to do anything\n  if (isEmpty(optionalFields)) {\n    return;\n  }\n\n  // Create an object to store the fields that need to be omitted\n  const shouldOmit = new Set<string>();\n\n  // iterate over each of the tests in the state\n  TestWalker.walkTests(testObject => {\n    if (VestTest.isPending(testObject)) {\n      return;\n    }\n    const { fieldName } = VestTest.getData(testObject);\n\n    // If we already added the current field (not this test specifically)\n    // no need for further checks, go and omit the test\n    if (shouldOmit.has(fieldName)) {\n      verifyAndOmit(testObject);\n    } else {\n      // check if the field has an optional function\n      // if so, run it and verify/omit the test\n      runOptionalConfig(testObject);\n    }\n  });\n\n  Bus.useEmit('DONE_TEST_OMISSION_PASS');\n\n  function verifyAndOmit(testObject: TIsolateTest) {\n    const { fieldName } = VestTest.getData(testObject);\n    if (shouldOmit.has(fieldName)) {\n      VestTest.omit(testObject);\n      SuiteOptionalFields.setOptionalField(root, fieldName, current => ({\n        ...current,\n        applied: true,\n      }));\n    }\n  }\n\n  function runOptionalConfig(testObject: TIsolateTest) {\n    const { fieldName } = VestTest.getData(testObject);\n\n    // Ge the optional configuration for the given field\n    const optionalConfig = SuiteOptionalFields.getOptionalField(\n      root,\n      fieldName,\n    );\n\n    // If the optional was set to a function or a boolean, run it and verify/omit the test\n    if (optionalFunctionValue(optionalConfig.rule) === true) {\n      shouldOmit.add(fieldName);\n    }\n\n    verifyAndOmit(testObject);\n  }\n}\n","import { CB, ValueOf } from 'vest-utils';\nimport { Bus, RuntimeEvents, TIsolate } from 'vestjs-runtime';\n\nimport { Events } from 'BusEvents';\n// import { TIsolateTest } from 'IsolateTest';\nimport {\n  useExpireSuiteResultCache,\n  useResetCallbacks,\n  useResetSuite,\n} from 'Runtime';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\nimport { TestWalker } from 'TestWalker';\nimport { VestIsolate } from 'VestIsolate';\nimport { VestTest } from 'VestTest';\nimport { useOmitOptionalFields } from 'omitOptionalFields';\nimport { useRunDoneCallbacks, useRunFieldCallbacks } from 'runCallbacks';\n\n// eslint-disable-next-line max-statements, max-lines-per-function\nexport function useInitVestBus() {\n  const VestBus = Bus.useBus();\n\n  on('TEST_COMPLETED', () => {});\n\n  on('TEST_RUN_STARTED', () => {\n    // Bringin this back due to https://github.com/ealush/vest/issues/1157\n    // This is a very pecluiar bug in which we're seeing vest behaving differently between\n    // runs when suite.get() is called.\n    // In the bug we experienced that failing tests were skipped in the second run.\n    // The reason: suite.get() built the failures cache. Calling suite.get() before the test run\n    // made Vest think that the field already had failing tests (even though it was the same test!)\n    // and it skipped the test.\n    // A better solution is to be able to identify each failure to its actual position in the suite\n    // but this requires some rearchitecting within Vest.\n    // This is an easy enough solution - we just reset the cache before the test run, let's hope we don't see\n    // any performance issues.\n  });\n\n  VestBus.on(RuntimeEvents.ISOLATE_PENDING, (isolate: TIsolate) => {\n    if (VestTest.is(isolate)) {\n      VestTest.setPending(isolate);\n    }\n\n    VestIsolate.setPending(isolate);\n  });\n\n  VestBus.on(RuntimeEvents.ISOLATE_DONE, (isolate: TIsolate) => {\n    if (VestTest.is(isolate)) {\n      VestBus.emit('TEST_COMPLETED', isolate);\n    }\n\n    VestIsolate.setDone(isolate);\n  });\n\n  VestBus.on(RuntimeEvents.ASYNC_ISOLATE_DONE, (isolate: TIsolate) => {\n    if (VestTest.is(isolate)) {\n      if (!VestTest.isCanceled(isolate)) {\n        const { fieldName } = VestTest.getData(isolate);\n\n        useRunFieldCallbacks(fieldName);\n      }\n    }\n\n    if (!SuiteWalker.useHasPending()) {\n      // When no more async tests are running, emit the done event\n      VestBus.emit('ALL_RUNNING_TESTS_FINISHED');\n    }\n  });\n\n  on('DONE_TEST_OMISSION_PASS', () => {\n    /* We NEED to refresh the cache here. Don't ask */\n  });\n\n  // Called when all the tests, including async, are done running\n  VestBus.on('ALL_RUNNING_TESTS_FINISHED', () => {\n    // Small optimization. We don't need to run this if there are no async tests\n    // The reason is that we run this function immediately after the suite callback\n    // is run, so if the suite is only comprised of sync tests, we don't need to\n    // run this function twice since we know for a fact the state is up to date\n    if (TestWalker.someTests(VestTest.isAsyncTest)) {\n      useOmitOptionalFields();\n    }\n    useRunDoneCallbacks();\n  });\n\n  on('RESET_FIELD', (fieldName: TFieldName) => {\n    TestWalker.resetField(fieldName);\n  });\n\n  on('SUITE_RUN_STARTED', () => {\n    useResetCallbacks();\n  });\n\n  on('SUITE_CALLBACK_RUN_FINISHED', () => {\n    if (!SuiteWalker.useHasPending()) {\n      // When no more async tests are running, emit the done event\n      VestBus.emit('ALL_RUNNING_TESTS_FINISHED');\n    }\n\n    useOmitOptionalFields();\n  });\n\n  on('REMOVE_FIELD', (fieldName: TFieldName) => {\n    TestWalker.removeTestByFieldName(fieldName);\n  });\n\n  on('RESET_SUITE', () => {\n    useResetSuite();\n  });\n\n  return {\n    subscribe,\n  };\n\n  function subscribe(event: Events, cb: CB): CB<void>;\n  function subscribe(cb: CB): CB<void>;\n  function subscribe(...args: [event: Events, cb: CB] | [cb: CB]): CB<void> {\n    const [cb, event] = args.reverse() as [CB, Events];\n    return VestBus.on(event ?? '*', () => {\n      cb();\n    }).off;\n  }\n\n  function on(event: VestEvents, cb: (...args: any[]) => void) {\n    VestBus.on(event, (...args: any[]) => {\n      // This is more concise, but it might be an overkill\n      // if we're adding events that don't need to invalidate the cache\n      useExpireSuiteResultCache();\n      cb(...args);\n    });\n  }\n}\n\ntype VestEvents = Events | ValueOf<typeof RuntimeEvents> | '*';\n\nexport type Subscribe = {\n  (event: Events, cb: CB): CB<void>;\n  (cb: CB): CB<void>;\n};\n","import { isArray, callEach } from 'vest-utils';\n\nimport { useDoneCallbacks, useFieldCallbacks } from 'Runtime';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\n\n/**\n * Runs done callback per field when async tests are finished running.\n */\nexport function useRunFieldCallbacks(fieldName?: TFieldName): void {\n  const [fieldCallbacks] = useFieldCallbacks();\n\n  if (\n    fieldName &&\n    !SuiteWalker.useHasRemainingWithTestNameMatching(fieldName) &&\n    isArray(fieldCallbacks[fieldName])\n  ) {\n    callEach(fieldCallbacks[fieldName]);\n  }\n}\n\n/**\n * Runs unlabelled done callback when async tests are finished running.\n */\nexport function useRunDoneCallbacks() {\n  const [doneCallbacks] = useDoneCallbacks();\n  callEach(doneCallbacks);\n}\n","import { freezeAssign } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport {\n  SuiteResult,\n  SuiteRunResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\nimport { useDeferDoneCallback } from 'deferDoneCallback';\nimport { shouldSkipDoneRegistration } from 'shouldSkipDoneRegistration';\nimport { useCreateSuiteResult } from 'suiteResult';\n\nexport function useSuiteRunResult<\n  F extends TFieldName,\n  G extends TGroupName,\n>(): SuiteRunResult<F, G> {\n  return freezeAssign<SuiteRunResult<F, G>>(\n    {\n      done: VestRuntime.persist(done) as Done<F, G>,\n    },\n    useCreateSuiteResult<F, G>(),\n  );\n}\n\n/**\n * Registers done callbacks.\n * @register {Object} Vest output object.\n */\n// @vx-allow use-use\nfunction done<F extends TFieldName, G extends TGroupName>(\n  ...args: any[]\n): SuiteRunResult<F, G> {\n  const [callback, fieldName] = args.reverse() as [\n    (res: SuiteResult<F, G>) => void,\n    F,\n  ];\n  const output = useSuiteRunResult<F, G>();\n  if (shouldSkipDoneRegistration<F, G>(callback, fieldName, output)) {\n    return output;\n  }\n  const useDoneCallback = () => callback(useCreateSuiteResult());\n  if (!SuiteWalker.useHasRemainingWithTestNameMatching(fieldName)) {\n    useDoneCallback();\n    return output;\n  }\n  useDeferDoneCallback(useDoneCallback, fieldName);\n  return output;\n}\n\nexport interface Done<F extends TFieldName, G extends TGroupName> {\n  (...args: [cb: (res: SuiteResult<F, G>) => void]): SuiteRunResult<F, G>;\n  (\n    ...args: [fieldName: F, cb: (res: SuiteResult<F, G>) => void]\n  ): SuiteRunResult<F, G>;\n}\n","/**\n * DONE is here and not in its own module to prevent circular dependency issues.\n */\n\nimport { Maybe, isFunction, numberEquals } from 'vest-utils';\n\nimport {\n  SuiteResult,\n  SuiteRunResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\n\nexport function shouldSkipDoneRegistration<\n  F extends TFieldName,\n  G extends TGroupName,\n>(\n  callback: (res: SuiteResult<F, G>) => void,\n\n  fieldName: Maybe<F>,\n  output: SuiteRunResult<F, G>,\n): boolean {\n  // If we do not have any test runs for the current field\n  return !!(\n    !isFunction(callback) ||\n    (fieldName && numberEquals(output.tests[fieldName]?.testCount ?? 0, 0))\n  );\n}\n","import { assign } from 'vest-utils';\n\nimport { DoneCallback, useDoneCallbacks, useFieldCallbacks } from 'Runtime';\nimport { TFieldName } from 'SuiteResultTypes';\n\nexport function useDeferDoneCallback(\n  doneCallback: DoneCallback,\n  fieldName?: TFieldName,\n): void {\n  const [, setFieldCallbacks] = useFieldCallbacks();\n  const [, setDoneCallbacks] = useDoneCallbacks();\n\n  if (fieldName) {\n    setFieldCallbacks(fieldCallbacks =>\n      assign(fieldCallbacks, {\n        [fieldName]: (fieldCallbacks[fieldName] || []).concat(doneCallback),\n      }),\n    );\n\n    return;\n  }\n\n  setDoneCallbacks(doneCallbacks => doneCallbacks.concat(doneCallback));\n}\n","import { asArray, assign, CB } from 'vest-utils';\nimport { Bus, VestRuntime } from 'vestjs-runtime';\n\nimport { TTypedMethods, getTypedMethods } from './getTypedMethods';\n\nimport { IsolateSuite, TIsolateSuite } from 'IsolateSuite';\nimport { useCreateVestState, useLoadSuite } from 'Runtime';\nimport { SuiteContext } from 'SuiteContext';\nimport {\n  SuiteName,\n  SuiteResult,\n  SuiteRunResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\nimport { Suite } from 'SuiteTypes';\nimport { useInitVestBus } from 'VestBus';\nimport { VestReconciler } from 'VestReconciler';\nimport { useCreateSuiteResult } from 'suiteResult';\nimport { useSuiteRunResult } from 'suiteRunResult';\nimport { bindSuiteSelectors } from 'suiteSelectors';\nimport { validateSuiteCallback } from 'validateSuiteParams';\n\nfunction createSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(suiteName: SuiteName, suiteCallback: T): Suite<F, G, T>;\nfunction createSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(suiteCallback: T): Suite<F, G, T>;\n// @vx-allow use-use\n// eslint-disable-next-line max-lines-per-function\nfunction createSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(\n  ...args: [suiteName: SuiteName, suiteCallback: T] | [suiteCallback: T]\n): Suite<F, G, T> {\n  const [suiteCallback, suiteName] = asArray(args).reverse() as [T, SuiteName];\n\n  validateSuiteCallback(suiteCallback);\n\n  // Create a stateRef for the suite\n  // It holds the suite's persisted values that may remain between runs.\n  const stateRef = useCreateVestState({ suiteName, VestReconciler });\n\n  function suite(...args: Parameters<T>): SuiteRunResult<F, G> {\n    return SuiteContext.run(\n      {\n        suiteParams: args,\n      },\n      () => {\n        Bus.useEmit('SUITE_RUN_STARTED');\n\n        return IsolateSuite(\n          useRunSuiteCallback<T, F, G>(suiteCallback, ...args),\n        );\n      },\n    ).output;\n  }\n\n  const mountedStatic = staticSuite<F, G, T>(...(args as [T]));\n\n  // Assign methods to the suite\n  // We do this within the VestRuntime so that the suite methods\n  // will be bound to the suite's stateRef and be able to access it.\n  return VestRuntime.Run(stateRef, () => {\n    // @vx-allow use-use\n    const VestBus = useInitVestBus();\n\n    return assign(\n      // We're also binding the suite to the stateRef, so that the suite\n      // can access the stateRef when it's called.\n      VestRuntime.persist(suite),\n      {\n        dump: VestRuntime.persist(\n          () => VestRuntime.useAvailableRoot() as TIsolateSuite,\n        ),\n        get: VestRuntime.persist(useCreateSuiteResult),\n        remove: Bus.usePrepareEmitter<string>('REMOVE_FIELD'),\n        reset: Bus.usePrepareEmitter('RESET_SUITE'),\n        resetField: Bus.usePrepareEmitter<string>('RESET_FIELD'),\n        resume: VestRuntime.persist(useLoadSuite),\n        runStatic: (...args: Parameters<T>): StaticSuiteRunResult<F, G> =>\n          mountedStatic(...args) as StaticSuiteRunResult<F, G>,\n        subscribe: VestBus.subscribe,\n        ...bindSuiteSelectors<F, G>(VestRuntime.persist(useCreateSuiteResult)),\n        ...getTypedMethods<F, G>(),\n      },\n    );\n  });\n}\n\nfunction useRunSuiteCallback<\n  T extends CB,\n  F extends TFieldName,\n  G extends TGroupName,\n>(suiteCallback: T, ...args: Parameters<T>): CB<SuiteRunResult<F, G>> {\n  const emit = Bus.useEmit();\n\n  return () => {\n    suiteCallback(...args);\n    emit('SUITE_CALLBACK_RUN_FINISHED');\n    return useSuiteRunResult<F, G>();\n  };\n}\n\n/**\n * Creates a static suite for server-side validation.\n *\n * @param {Function} validationFn - The validation function that defines the suite's tests.\n * @returns {Function} - A function that runs the validations defined in the suite.\n *\n * @example\n * import { staticSuite, test, enforce } from 'vest';\n *\n * const suite = staticSuite(data => {\n *   test('username', 'username is required', () => {\n *     enforce(data.username).isNotEmpty();\n *   });\n * });\n *\n * suite(data);\n */\n\nfunction staticSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(suiteName: SuiteName, suiteCallback: T): StaticSuite<F, G, T>;\nfunction staticSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(suiteCallback: T): StaticSuite<F, G, T>;\n// @vx-allow use-use\n// eslint-disable-next-line max-lines-per-function\nfunction staticSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(\n  ...createArgs: [suiteName: SuiteName, suiteCallback: T] | [suiteCallback: T]\n): StaticSuite<F, G, T> {\n  return assign(\n    (...args: Parameters<T>): StaticSuiteRunResult<F, G> => {\n      const suite = createSuite<F, G, T>(\n        ...(createArgs as unknown as [SuiteName, T]),\n      );\n\n      const result = suite(...args);\n\n      return assign(\n        new Promise<SuiteWithDump<F, G>>(resolve => {\n          result.done(res => {\n            resolve(withDump(res) as SuiteWithDump<F, G>);\n          });\n        }),\n        withDump(result),\n      );\n\n      function withDump(o: any) {\n        return assign({ dump: suite.dump }, o);\n      }\n    },\n    {\n      ...getTypedMethods<F, G>(),\n    },\n  );\n}\n\nexport type StaticSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n> = (...args: Parameters<T>) => StaticSuiteRunResult<F, G>;\n\nexport type StaticSuiteRunResult<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n> = Promise<SuiteWithDump<F, G>> &\n  WithDump<SuiteRunResult<F, G> & TTypedMethods<F, G>>;\n\ntype WithDump<T> = T & { dump: CB<TIsolateSuite> };\ntype SuiteWithDump<F extends TFieldName, G extends TGroupName> = WithDump<\n  SuiteResult<F, G>\n>;\n\nexport { createSuite, staticSuite };\n","import { CB, invariant, isFunction } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\n\nexport function validateSuiteCallback<T extends CB>(\n  suiteCallback: T,\n): asserts suiteCallback is T {\n  invariant(\n    isFunction(suiteCallback),\n    ErrorStrings.SUITE_MUST_BE_INITIALIZED_WITH_FUNCTION,\n  );\n}\n","import { invariant, isFunction } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { IsolateEach } from 'IsolateEach';\n\n/**\n * Iterates over an array of items, allowing to run tests individually per item.\n *\n * Requires setting a \"key\" property on each item tested.\n *\n * @example\n *\n * each(itemsArray, (item) => {\n *  test(item.name, 'Item value must not be empty', () => {\n *    enforce(item.value).isNotEmpty();\n *  }, item.id)\n * })\n */\nexport function each<T>(\n  list: T[],\n  callback: (arg: T, index: number) => void,\n): void {\n  invariant(\n    isFunction(callback),\n    ErrorStrings.EACH_CALLBACK_MUST_BE_A_FUNCTION,\n  );\n\n  IsolateEach(() => {\n    list.forEach((arg, index) => {\n      callback(arg, index);\n    });\n  });\n}\n","import { CB } from 'vest-utils';\nimport { TIsolate, Isolate } from 'vestjs-runtime';\n\nimport { VestIsolateType } from 'VestIsolateType';\n\ntype TIsolateEach = TIsolate;\n\nexport function IsolateEach<Callback extends CB = CB>(\n  callback: Callback,\n): TIsolateEach {\n  return Isolate.create(VestIsolateType.Each, callback, {\n    allowReorder: true,\n  });\n}\n","import { invariant } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { useCurrentTest } from 'SuiteContext';\nimport { VestTest } from 'VestTest';\n\nconst ERROR_OUTSIDE_OF_TEST = ErrorStrings.WARN_MUST_BE_CALLED_FROM_TEST;\n\n/**\n * Sets the severity level of a test to `warn`, allowing it to fail without marking the suite as invalid.\n * Use this function within the body of a test to create warn-only tests.\n *\n * @returns {void}\n *\n * @example\n *   test('password', 'Your password strength is: WEAK', () => {\n *     warn();\n *\n *     enforce(data.password).matches(/0-9/);\n *   });\n *\n * @limitations\n * - The `warn` function should only be used within the body of a `test` function.\n * - When using `warn()` in an async test, it should be called in the synchronous portion of the test, not after an `await` call or in the Promise body.\n * - It is recommended to call `warn()` at the top of the test function.\n */\n// @vx-allow use-use\nexport function warn(): void {\n  const currentTest = useCurrentTest(ErrorStrings.HOOK_CALLED_OUTSIDE);\n\n  invariant(currentTest, ERROR_OUTSIDE_OF_TEST);\n\n  VestTest.warn(currentTest);\n}\n"],"names":["VestIsolateType","Each","Focused","Group","OmitWhen","SkipWhen","Suite","Test","SuiteOptionalFields","setOptionalField","suite","fieldName","setter","current","data","optional","currentField","assign","getOptionalField","_a","getOptionalFields","_b","OptionalFieldTypes","Modes","SuiteContext","createCascade","ctxRef","parentContext","inclusion","mode","tinyState","createTinyState","EAGER","suiteParams","testMemoCache","useInclusion","useX","useMode","cache","optionals","suiteRoot","VestRuntime","useAvailableRoot","dataObject","isArray","isStringValue","asArray","forEach","optionalField","type","AUTO","applied","hasOwnProperty","enforce","isBlank","test","rule","field","value","CUSTOM_LOGIC","useIsOptionalFieldApplied","root","ErrorStrings","CommonStates","State","CommonStates_PENDING","CommonStates_INITIAL","CommonStates_DONE","CommonStateMachine","StateMachine","initial","INITIAL","states","DONE","PENDING","TestStatus","CANCELED","FAILED","OMITTED","PASSING","SKIPPED","UNTESTED","WARNING","TestAction","IsolateTestStateMachine","TestAction_RESET","force","Severity","SeverityCount","TestSeverity","FocusModes","countKeyBySeverity","severity","ERRORS","ERROR_COUNT","WARN_COUNT","VestIsolate","getStatus","isolate","status","setStatus","payload","this","stateMachine","staticTransition","statusEquals","setPending","setDone","isPending","VestTest","getData","invariant","is","IsolateSelectors","isIsolateType","isX","EXPECTED_VEST_TEST","cast","warns","Warning","isOmitted","isUntested","isFailing","isCanceled","isSkipped","isPassing","isWarning","hasFailures","isNonActionable","isTested","awaitsResolution","isAsyncTest","isPromise","asyncTest","fail","pass","warn","setData","optionalFunctionValue","skip","cancel","IsolateMutator","abort","omit","reset","nonMatchingFieldName","WithFieldName","matchingFieldName","isSameProfileTest","testObject1","testObject2","groupName","gn1","gn2","fn2","key","IsolateFocused","focusMode","match","Isolate","create","noop","filter","matchAll","FocusSelectors","isSkipFocused","focus","SKIP","hasFocus","isOnlyFocused","ONLY","isIsolateFocused","only","defaultMatch","isNotEmpty","includes","SummaryBase","constructor","errorCount","warnCount","testCount","pendingCount","SuiteSummary","groups","tests","valid","WARNINGS","suiteResultCache","preAggCache","useXAppData","useDoneCallbacks","doneCallbacks","useFieldCallbacks","fieldCallbacks","useSuiteId","suiteId","useExpireSuiteResultCache","invalidate","useResetCallbacks","resetDoneCallbacks","resetFieldCallbacks","useLoadSuite","rootNode","useSetHistoryRoot","gatherFailures","testGroup","severityKey","getByFieldName","output","countKey","isPositive","collectAll","suiteSelectors","summary","selectors","getError","getErrors","getFailures","getErrorsByGroup","getFailuresByGroup","getMessage","getWarning","getWarnings","getWarningsByGroup","hasErrors","hasErrorsByGroup","hasFailuresByGroup","hasWarnings","hasWarningsByGroup","greaterThan","isValid","Boolean","isValidByGroup","group","isFieldValid","getFailure","testContainer","severityCount","failureCount","summaryKey","find","summaryFailure","message","SummaryFailure","fromTestObject","testObject","TestWalker","hasNoTests","defaultRoot","Walker","has","someTests","predicate","some","everyTest","every","walkTests","callback","walk","breakout","reduceTests","initialValue","reduce","acc","pluckTests","pluck","resetField","removeTestByFieldName","SuiteWalker","useHasPending","allPending","usePreAggs","pending","isEmpty","Predicates","all","action","buildPreAggCache","useHasRemainingWithTestNameMatching","any","isNullish","matchesOrHasNoFieldName","base","failures","errors","warnings","agg","push","nonMatchingGroupName","bindNot","hasErrorsByTestObjects","allFailures","hasFailuresByTestObjects","hasGroupFailuresByTestObjects","either","nonMatchingSeverityProfile","hasFailuresByTestObject","useShouldAddValidProperty","useHasNonOptionalIncomplete","useNoMissingTestsLogic","useNoMissingTests","useShouldAddValidPropertyInGroup","useHasNonOptionalIncompleteByGroup","useNoMissingTestsByGroup","useOptionalTestAwaitsResolution","useProduceSuiteSummary","appendTestObject","useAppendToTest","useAppendToGroup","shouldCountTestRun","addSummaryStats","nextSummaryKey","defaultTo","Object","baseTestStats","incrementFailures","concat","useCreateSuiteResult","suiteName","freeze","constructSuiteResultObject","LazyDraft","emptySummary","Proxy","get","_","prop","skipWhen","condition","run","skipped","useIsExcludedIndividually","useSkipped","useHasOnliedTests","isNotNullish","findClosest","child","useIsExcluded","focusMatch","useClosestMatchingFocus","setMode","useIsMode","currentMode","useShouldSkipBasedOnMode","testData","ONE","omitWhen","conditional","omitted","useWithinActiveOmitWhen","useOmitted","useVerifyTestRun","collisionResult","testNode","omitTestAndReturn","useForceSkipIfInSkipWhen","nodeReorderDetected","newNode","prevNode","reconcilers","currentNode","historyNode","reconcile","nextNode","IsolateInspector","usesKey","Reconciler","handleIsolateNodeWithKey","useHandleTestWithKey","dropNextNodesOnReorder","canReorder","deferThrow","text","TESTS_CALLED_IN_DIFFERENT_ORDER","prevName","undefined","throwTestOrderError","usePickNode","prevTestObject","currentRunTestObject","prevRunTestObject","cancelOverriddenPendingTestOnTestReRun","registerReconciler","reconciler","VestReconciler","args","reverse","include","when","INCLUDE_SELF","IsolateTest","input","Error","testFn","useAttemptRunTest","result","currentTest","signal","abortController","error","isUndefined","shouldUseErrorAsMessage","runSyncTest","done","persist","onTestCompleted","rejectionMessage","then","useRunAsyncTest","e","UNEXPECTED_TEST_REGISTRATION_ERROR","JSON","stringify","useRunTest","vestTest","isFunction","fnName","INVALID_PARAM_PASSED_TO_FUNCTION","fn_name","param","expected","validateTestParams","testObjectInput","Bus","useEmit","memo","deps","msg","dependencies","cacheAction","cached","isNull","cachedValue","useSetNextIsolateChild","useGetTestFromCache","Runtime.useSuiteId","useCurrentCursor","wrapTestMemo","getTypedMethods","useOmitOptionalFields","optionalFields","shouldOmit","Set","verifyAndOmit","optionalConfig","add","runOptionalConfig","useInitVestBus","VestBus","useBus","on","RuntimeEvents","ISOLATE_PENDING","ISOLATE_DONE","emit","ASYNC_ISOLATE_DONE","callEach","useRunFieldCallbacks","useRunDoneCallbacks","subscribe","cb","event","off","useSuiteRunResult","freezeAssign","numberEquals","shouldSkipDoneRegistration","useDoneCallback","doneCallback","setFieldCallbacks","setDoneCallbacks","useDeferDoneCallback","createSuite","suiteCallback","SUITE_MUST_BE_INITIALIZED_WITH_FUNCTION","validateSuiteCallback","stateRef","seq","createRef","useCreateVestState","useRunSuiteCallback","mountedStatic","staticSuite","Run","dump","remove","usePrepareEmitter","resume","runStatic","createArgs","Promise","resolve","res","withDump","o","each","list","EACH_CALLBACK_MUST_BE_A_FUNCTION","allowReorder","IsolateEach","arg","index","ERROR_OUTSIDE_OF_TEST","WARN_MUST_BE_CALLED_FROM_TEST","HOOK_CALLED_OUTSIDE"],"mappings":"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"}